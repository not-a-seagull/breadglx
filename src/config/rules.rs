// MIT/Apache2 License

use super::*;

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum GlConfigRule {
    DoubleBufferMode(c_uint),
    StereoMode(c_uint),
    RedBits(c_int),
    GreenBits(c_int),
    BlueBits(c_int),
    AlphaBits(c_int),
    RedMask(c_uint),
    GreenMask(c_uint),
    BlueMask(c_uint),
    AlphaMask(c_uint),
    RedShift(c_uint),
    GreenShift(c_uint),
    BlueShift(c_uint),
    AlphaShift(c_uint),
    RgbBits(c_int),
    ColorIndex(c_int),
    AccumRedBits(c_int),
    AccumGreenBits(c_int),
    AccumBlueBits(c_int),
    AccumAlphaBits(c_int),
    DepthBits(c_int),
    StencilBits(c_int),
    VisualId(c_int),
    VisualType(GlVisualType),
    VisualRating(c_int),
    TransparentPixel(c_int),
    TransparentRed(c_int),
    TransparentGreen(c_int),
    TransparentBlue(c_int),
    TransparentAlpha(c_int),
    TransparentIndex(c_int),
    SampleBuffers(c_int),
    Samples(c_int),
    DrawableType(c_int),
    RenderType(c_int),
    XRenderable(c_int),
    FbconfigId(c_int),
    MaxPbufferWidth(c_int),
    MaxPbufferHeight(c_int),
    MaxPbufferPixels(c_int),
    OptimalPbufferWidth(c_int),
    OptimalPbufferHeight(c_int),
    VisualSelectGroup(c_int),
    SwapMethod(GlSwapMethod),
    Screen(c_int),
    BindToTextureRgb(c_int),
    BindToTextureRgba(c_int),
    BindToMipmapTexture(c_int),
    BindToTextureTargets(c_int),
    YInverted(c_int),
    SrgbCapable(c_int),
    NumAuxBuffers(c_int),
    Level(c_int),
}

/*
impl GlConfigRule {
    #[inline]
    pub(crate) fn into_raw_glx_pair(self) -> (c_int, c_int) {
match self {
Self::RgbBits(rgb) => (BUFFER_SIZE, rgb),
Self::Level(l) => (LEVEL, l),
Self::DoubleBufferMode(dbm) => (DOUBLEBFUFER_MODE, dbm),
Self::StereoMode(s) => (STEREO_MODE, s),
Self::NumAuxBuffers(nab) => (AUX_BUFFERS, nab),
Self::RedBits(r) => (RED_SIZE, r),
Self::GreenBits(g) => (GREEN_SIZE, g),
Self::BlueBits(b) => (BLUE_SIZE, b),
Self::AlphaBits(a) => (ALPHA_SIZE, a),
Self::DepthBits(d) => (DEPTH_SIZE, d),
Self::StencilBits(s) => (STENCIL_SIZE, s),
Self::AccumRedBits(r) => (ACCUM_RED_SIZE, r),
Self::AccumGreenBits(g) => (ACCUM_GREEN_SIZE, g),
Self::AccumBlueBits(b) => (ACCUM_BLUE_SIZE, b),
Self::AccumAlphaSize(a) => (ACCUM_ALPHA_SIZE, a),
Self::VisualRating(vr) => (VISUAL_CAVEAT_EXT, vr),
Self::VisualType(v) => (VISUAL_TYPE, match v {
  GlVisualType::TrueColor => TRUE_COLOR,
  GlVisualType::DirectColor => DIRECT_COLOR,
  GlVisualType::PseudoColor => PSEUDO_COLOR,
  GlVisualType::StaticColor => STATIC_COLOR,
  GlVisualType::GrayScale => GRAY_SCALE,
  GlVisualType::StaticGray => STATIC_GRAY,
  GlVisualType::DontCare => DONT_CARE,
}),
Self::TransparentPixel(tp) => (TRANSPARENT_TYPE, tp),
Self::TransparentIndex(ti) => (TRANSPARENT_INDEX, ti),
Self::TransparentRed(tr) => (TRANSPARENT_RED, tr),
Self::TransparentGreen(tg) => (TRANSPARENT_GREEN, tg),
Self::TransparentBlue(tb) => (TRANSPARENT_BLUE, tb),
Self::TransparentAlpha(ta) => (TRANSPARENT_ALPHA, ta),
}
    }
}
*/
