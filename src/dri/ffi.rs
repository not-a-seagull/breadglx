/* automatically generated by rust-bindgen 0.56.0 */

#![allow(warnings)]

use std::os::raw::c_int;

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __DRI_READ_DRAWABLE: &'static [u8; 17usize] = b"DRI_ReadDrawable\0";
pub const __DRI_READ_DRAWABLE_VERSION: u32 = 1;
pub const __DRI_COPY_SUB_BUFFER: &'static [u8; 18usize] = b"DRI_CopySubBuffer\0";
pub const __DRI_COPY_SUB_BUFFER_VERSION: u32 = 1;
pub const __DRI_SWAP_CONTROL: &'static [u8; 16usize] = b"DRI_SwapControl\0";
pub const __DRI_SWAP_CONTROL_VERSION: u32 = 1;
pub const __DRI_FRAME_TRACKING: &'static [u8; 18usize] = b"DRI_FrameTracking\0";
pub const __DRI_FRAME_TRACKING_VERSION: u32 = 1;
pub const __DRI_MEDIA_STREAM_COUNTER: &'static [u8; 23usize] = b"DRI_MediaStreamCounter\0";
pub const __DRI_MEDIA_STREAM_COUNTER_VERSION: u32 = 1;
pub const __DRI_TEX_OFFSET: &'static [u8; 14usize] = b"DRI_TexOffset\0";
pub const __DRI_TEX_OFFSET_VERSION: u32 = 1;
pub const __DRI_TEXTURE_FORMAT_NONE: u32 = 8408;
pub const __DRI_TEXTURE_FORMAT_RGB: u32 = 8409;
pub const __DRI_TEXTURE_FORMAT_RGBA: u32 = 8410;
pub const __DRI_TEX_BUFFER: &'static [u8; 14usize] = b"DRI_TexBuffer\0";
pub const __DRI_TEX_BUFFER_VERSION: u32 = 3;
pub const __DRI2_FLUSH: &'static [u8; 11usize] = b"DRI2_Flush\0";
pub const __DRI2_FLUSH_VERSION: u32 = 4;
pub const __DRI2_FLUSH_DRAWABLE: u32 = 1;
pub const __DRI2_FLUSH_CONTEXT: u32 = 2;
pub const __DRI2_FLUSH_INVALIDATE_ANCILLARY: u32 = 4;
pub const __DRI2_THROTTLE: &'static [u8; 14usize] = b"DRI2_Throttle\0";
pub const __DRI2_THROTTLE_VERSION: u32 = 1;
pub const __DRI2_BLOB: &'static [u8; 10usize] = b"DRI2_Blob\0";
pub const __DRI2_BLOB_VERSION: u32 = 1;
pub const __DRI2_FENCE: &'static [u8; 11usize] = b"DRI2_Fence\0";
pub const __DRI2_FENCE_VERSION: u32 = 2;
pub const __DRI2_FENCE_TIMEOUT_INFINITE: i32 = -1;
pub const __DRI2_FENCE_FLAG_FLUSH_COMMANDS: u32 = 1;
pub const __DRI_FENCE_CAP_NATIVE_FD: u32 = 1;
pub const __DRI2_INTEROP: &'static [u8; 13usize] = b"DRI2_Interop\0";
pub const __DRI2_INTEROP_VERSION: u32 = 1;
pub const __DRI2_BUFFER_DAMAGE: &'static [u8; 18usize] = b"DRI2_BufferDamage\0";
pub const __DRI2_BUFFER_DAMAGE_VERSION: u32 = 1;
pub const __DRI_GET_DRAWABLE_INFO: &'static [u8; 20usize] = b"DRI_GetDrawableInfo\0";
pub const __DRI_GET_DRAWABLE_INFO_VERSION: u32 = 1;
pub const __DRI_SYSTEM_TIME: &'static [u8; 15usize] = b"DRI_SystemTime\0";
pub const __DRI_SYSTEM_TIME_VERSION: u32 = 1;
pub const __DRI_DAMAGE: &'static [u8; 11usize] = b"DRI_Damage\0";
pub const __DRI_DAMAGE_VERSION: u32 = 1;
pub const __DRI_SWRAST_IMAGE_OP_DRAW: u32 = 1;
pub const __DRI_SWRAST_IMAGE_OP_CLEAR: u32 = 2;
pub const __DRI_SWRAST_IMAGE_OP_SWAP: u32 = 3;
pub const __DRI_SWRAST_LOADER: &'static [u8; 17usize] = b"DRI_SWRastLoader\0";
pub const __DRI_SWRAST_LOADER_VERSION: u32 = 6;
pub const __DRI_USE_INVALIDATE: &'static [u8; 18usize] = b"DRI_UseInvalidate\0";
pub const __DRI_USE_INVALIDATE_VERSION: u32 = 1;
pub const __DRI_DRIVER_EXTENSIONS: &'static [u8; 22usize] = b"__driDriverExtensions\0";
pub const __DRI_DRIVER_GET_EXTENSIONS: &'static [u8; 25usize] = b"__driDriverGetExtensions\0";
pub const __DRI_ATTRIB_BUFFER_SIZE: u32 = 1;
pub const __DRI_ATTRIB_LEVEL: u32 = 2;
pub const __DRI_ATTRIB_RED_SIZE: u32 = 3;
pub const __DRI_ATTRIB_GREEN_SIZE: u32 = 4;
pub const __DRI_ATTRIB_BLUE_SIZE: u32 = 5;
pub const __DRI_ATTRIB_LUMINANCE_SIZE: u32 = 6;
pub const __DRI_ATTRIB_ALPHA_SIZE: u32 = 7;
pub const __DRI_ATTRIB_ALPHA_MASK_SIZE: u32 = 8;
pub const __DRI_ATTRIB_DEPTH_SIZE: u32 = 9;
pub const __DRI_ATTRIB_STENCIL_SIZE: u32 = 10;
pub const __DRI_ATTRIB_ACCUM_RED_SIZE: u32 = 11;
pub const __DRI_ATTRIB_ACCUM_GREEN_SIZE: u32 = 12;
pub const __DRI_ATTRIB_ACCUM_BLUE_SIZE: u32 = 13;
pub const __DRI_ATTRIB_ACCUM_ALPHA_SIZE: u32 = 14;
pub const __DRI_ATTRIB_SAMPLE_BUFFERS: u32 = 15;
pub const __DRI_ATTRIB_SAMPLES: u32 = 16;
pub const __DRI_ATTRIB_RENDER_TYPE: u32 = 17;
pub const __DRI_ATTRIB_CONFIG_CAVEAT: u32 = 18;
pub const __DRI_ATTRIB_CONFORMANT: u32 = 19;
pub const __DRI_ATTRIB_DOUBLE_BUFFER: u32 = 20;
pub const __DRI_ATTRIB_STEREO: u32 = 21;
pub const __DRI_ATTRIB_AUX_BUFFERS: u32 = 22;
pub const __DRI_ATTRIB_TRANSPARENT_TYPE: u32 = 23;
pub const __DRI_ATTRIB_TRANSPARENT_INDEX_VALUE: u32 = 24;
pub const __DRI_ATTRIB_TRANSPARENT_RED_VALUE: u32 = 25;
pub const __DRI_ATTRIB_TRANSPARENT_GREEN_VALUE: u32 = 26;
pub const __DRI_ATTRIB_TRANSPARENT_BLUE_VALUE: u32 = 27;
pub const __DRI_ATTRIB_TRANSPARENT_ALPHA_VALUE: u32 = 28;
pub const __DRI_ATTRIB_FLOAT_MODE: u32 = 29;
pub const __DRI_ATTRIB_RED_MASK: u32 = 30;
pub const __DRI_ATTRIB_GREEN_MASK: u32 = 31;
pub const __DRI_ATTRIB_BLUE_MASK: u32 = 32;
pub const __DRI_ATTRIB_ALPHA_MASK: u32 = 33;
pub const __DRI_ATTRIB_MAX_PBUFFER_WIDTH: u32 = 34;
pub const __DRI_ATTRIB_MAX_PBUFFER_HEIGHT: u32 = 35;
pub const __DRI_ATTRIB_MAX_PBUFFER_PIXELS: u32 = 36;
pub const __DRI_ATTRIB_OPTIMAL_PBUFFER_WIDTH: u32 = 37;
pub const __DRI_ATTRIB_OPTIMAL_PBUFFER_HEIGHT: u32 = 38;
pub const __DRI_ATTRIB_VISUAL_SELECT_GROUP: u32 = 39;
pub const __DRI_ATTRIB_SWAP_METHOD: u32 = 40;
pub const __DRI_ATTRIB_MAX_SWAP_INTERVAL: u32 = 41;
pub const __DRI_ATTRIB_MIN_SWAP_INTERVAL: u32 = 42;
pub const __DRI_ATTRIB_BIND_TO_TEXTURE_RGB: u32 = 43;
pub const __DRI_ATTRIB_BIND_TO_TEXTURE_RGBA: u32 = 44;
pub const __DRI_ATTRIB_BIND_TO_MIPMAP_TEXTURE: u32 = 45;
pub const __DRI_ATTRIB_BIND_TO_TEXTURE_TARGETS: u32 = 46;
pub const __DRI_ATTRIB_YINVERTED: u32 = 47;
pub const __DRI_ATTRIB_FRAMEBUFFER_SRGB_CAPABLE: u32 = 48;
pub const __DRI_ATTRIB_MUTABLE_RENDER_BUFFER: u32 = 49;
pub const __DRI_ATTRIB_RED_SHIFT: u32 = 50;
pub const __DRI_ATTRIB_GREEN_SHIFT: u32 = 51;
pub const __DRI_ATTRIB_BLUE_SHIFT: u32 = 52;
pub const __DRI_ATTRIB_ALPHA_SHIFT: u32 = 53;
pub const __DRI_ATTRIB_MAX: u32 = 54;
pub const __DRI_ATTRIB_RGBA_BIT: u32 = 1;
pub const __DRI_ATTRIB_COLOR_INDEX_BIT: u32 = 2;
pub const __DRI_ATTRIB_LUMINANCE_BIT: u32 = 4;
pub const __DRI_ATTRIB_FLOAT_BIT: u32 = 8;
pub const __DRI_ATTRIB_UNSIGNED_FLOAT_BIT: u32 = 16;
pub const __DRI_ATTRIB_SLOW_BIT: u32 = 1;
pub const __DRI_ATTRIB_NON_CONFORMANT_CONFIG: u32 = 2;
pub const __DRI_ATTRIB_TRANSPARENT_RGB: u32 = 0;
pub const __DRI_ATTRIB_TRANSPARENT_INDEX: u32 = 1;
pub const __DRI_ATTRIB_TEXTURE_1D_BIT: u32 = 1;
pub const __DRI_ATTRIB_TEXTURE_2D_BIT: u32 = 2;
pub const __DRI_ATTRIB_TEXTURE_RECTANGLE_BIT: u32 = 4;
pub const __DRI_ATTRIB_SWAP_NONE: u32 = 0;
pub const __DRI_ATTRIB_SWAP_EXCHANGE: u32 = 32865;
pub const __DRI_ATTRIB_SWAP_COPY: u32 = 32866;
pub const __DRI_ATTRIB_SWAP_UNDEFINED: u32 = 32867;
pub const __DRI_CORE: &'static [u8; 9usize] = b"DRI_Core\0";
pub const __DRI_CORE_VERSION: u32 = 2;
pub const __DRI_LEGACY: &'static [u8; 11usize] = b"DRI_Legacy\0";
pub const __DRI_LEGACY_VERSION: u32 = 1;
pub const __DRI_SWRAST: &'static [u8; 11usize] = b"DRI_SWRast\0";
pub const __DRI_SWRAST_VERSION: u32 = 4;
pub const __DRI_BUFFER_FRONT_LEFT: u32 = 0;
pub const __DRI_BUFFER_BACK_LEFT: u32 = 1;
pub const __DRI_BUFFER_FRONT_RIGHT: u32 = 2;
pub const __DRI_BUFFER_BACK_RIGHT: u32 = 3;
pub const __DRI_BUFFER_DEPTH: u32 = 4;
pub const __DRI_BUFFER_STENCIL: u32 = 5;
pub const __DRI_BUFFER_ACCUM: u32 = 6;
pub const __DRI_BUFFER_FAKE_FRONT_LEFT: u32 = 7;
pub const __DRI_BUFFER_FAKE_FRONT_RIGHT: u32 = 8;
pub const __DRI_BUFFER_DEPTH_STENCIL: u32 = 9;
pub const __DRI_BUFFER_HIZ: u32 = 10;
pub const __DRI_BUFFER_COUNT: u32 = 11;
pub const __DRI_DRI2_LOADER: &'static [u8; 15usize] = b"DRI_DRI2Loader\0";
pub const __DRI_DRI2_LOADER_VERSION: u32 = 5;
pub const __DRI_DRI2: &'static [u8; 9usize] = b"DRI_DRI2\0";
pub const __DRI_DRI2_VERSION: u32 = 4;
pub const __DRI_API_OPENGL: u32 = 0;
pub const __DRI_API_GLES: u32 = 1;
pub const __DRI_API_GLES2: u32 = 2;
pub const __DRI_API_OPENGL_CORE: u32 = 3;
pub const __DRI_API_GLES3: u32 = 4;
pub const __DRI_CTX_ATTRIB_MAJOR_VERSION: u32 = 0;
pub const __DRI_CTX_ATTRIB_MINOR_VERSION: u32 = 1;
pub const __DRI_CTX_ATTRIB_FLAGS: u32 = 2;
pub const __DRI_CTX_ATTRIB_RESET_STRATEGY: u32 = 3;
pub const __DRI_CTX_FLAG_DEBUG: u32 = 1;
pub const __DRI_CTX_FLAG_FORWARD_COMPATIBLE: u32 = 2;
pub const __DRI_CTX_FLAG_ROBUST_BUFFER_ACCESS: u32 = 4;
pub const __DRI_CTX_FLAG_NO_ERROR: u32 = 8;
pub const __DRI_CTX_RESET_NO_NOTIFICATION: u32 = 0;
pub const __DRI_CTX_RESET_LOSE_CONTEXT: u32 = 1;
pub const __DRI_CTX_ATTRIB_PRIORITY: u32 = 4;
pub const __DRI_CTX_PRIORITY_LOW: u32 = 0;
pub const __DRI_CTX_PRIORITY_MEDIUM: u32 = 1;
pub const __DRI_CTX_PRIORITY_HIGH: u32 = 2;
pub const __DRI_CTX_ATTRIB_RELEASE_BEHAVIOR: u32 = 5;
pub const __DRI_CTX_RELEASE_BEHAVIOR_NONE: u32 = 0;
pub const __DRI_CTX_RELEASE_BEHAVIOR_FLUSH: u32 = 1;
pub const __DRI_CTX_ERROR_SUCCESS: u32 = 0;
pub const __DRI_CTX_ERROR_NO_MEMORY: u32 = 1;
pub const __DRI_CTX_ERROR_BAD_API: u32 = 2;
pub const __DRI_CTX_ERROR_BAD_VERSION: u32 = 3;
pub const __DRI_CTX_ERROR_BAD_FLAG: u32 = 4;
pub const __DRI_CTX_ERROR_UNKNOWN_ATTRIBUTE: u32 = 5;
pub const __DRI_CTX_ERROR_UNKNOWN_FLAG: u32 = 6;
pub const __DRI_IMAGE: &'static [u8; 10usize] = b"DRI_IMAGE\0";
pub const __DRI_IMAGE_VERSION: u32 = 18;
pub const __DRI_IMAGE_FORMAT_RGB565: u32 = 4097;
pub const __DRI_IMAGE_FORMAT_XRGB8888: u32 = 4098;
pub const __DRI_IMAGE_FORMAT_ARGB8888: u32 = 4099;
pub const __DRI_IMAGE_FORMAT_ABGR8888: u32 = 4100;
pub const __DRI_IMAGE_FORMAT_XBGR8888: u32 = 4101;
pub const __DRI_IMAGE_FORMAT_R8: u32 = 4102;
pub const __DRI_IMAGE_FORMAT_GR88: u32 = 4103;
pub const __DRI_IMAGE_FORMAT_NONE: u32 = 4104;
pub const __DRI_IMAGE_FORMAT_XRGB2101010: u32 = 4105;
pub const __DRI_IMAGE_FORMAT_ARGB2101010: u32 = 4106;
pub const __DRI_IMAGE_FORMAT_SARGB8: u32 = 4107;
pub const __DRI_IMAGE_FORMAT_ARGB1555: u32 = 4108;
pub const __DRI_IMAGE_FORMAT_R16: u32 = 4109;
pub const __DRI_IMAGE_FORMAT_GR1616: u32 = 4110;
pub const __DRI_IMAGE_FORMAT_YUYV: u32 = 4111;
pub const __DRI_IMAGE_FORMAT_XBGR2101010: u32 = 4112;
pub const __DRI_IMAGE_FORMAT_ABGR2101010: u32 = 4113;
pub const __DRI_IMAGE_FORMAT_SABGR8: u32 = 4114;
pub const __DRI_IMAGE_FORMAT_UYVY: u32 = 4115;
pub const __DRI_IMAGE_FORMAT_XBGR16161616F: u32 = 4116;
pub const __DRI_IMAGE_FORMAT_ABGR16161616F: u32 = 4117;
pub const __DRI_IMAGE_FORMAT_SXRGB8: u32 = 4118;
pub const __DRI_IMAGE_USE_SHARE: u32 = 1;
pub const __DRI_IMAGE_USE_SCANOUT: u32 = 2;
pub const __DRI_IMAGE_USE_CURSOR: u32 = 4;
pub const __DRI_IMAGE_USE_LINEAR: u32 = 8;
pub const __DRI_IMAGE_USE_BACKBUFFER: u32 = 16;
pub const __DRI_IMAGE_USE_PROTECTED: u32 = 32;
pub const __DRI_IMAGE_TRANSFER_READ: u32 = 1;
pub const __DRI_IMAGE_TRANSFER_WRITE: u32 = 2;
pub const __DRI_IMAGE_TRANSFER_READ_WRITE: u32 = 3;
pub const __DRI_IMAGE_FOURCC_SARGB8888: u32 = 2201109080;
pub const __DRI_IMAGE_FOURCC_SABGR8888: u32 = 2217886296;
pub const __DRI_IMAGE_FOURCC_SXRGB8888: u32 = 2234663512;
pub const __DRI_IMAGE_COMPONENTS_RGB: u32 = 12289;
pub const __DRI_IMAGE_COMPONENTS_RGBA: u32 = 12290;
pub const __DRI_IMAGE_COMPONENTS_Y_U_V: u32 = 12291;
pub const __DRI_IMAGE_COMPONENTS_Y_UV: u32 = 12292;
pub const __DRI_IMAGE_COMPONENTS_Y_XUXV: u32 = 12293;
pub const __DRI_IMAGE_COMPONENTS_Y_UXVX: u32 = 12296;
pub const __DRI_IMAGE_COMPONENTS_AYUV: u32 = 12297;
pub const __DRI_IMAGE_COMPONENTS_XYUV: u32 = 12298;
pub const __DRI_IMAGE_COMPONENTS_R: u32 = 12294;
pub const __DRI_IMAGE_COMPONENTS_RG: u32 = 12295;
pub const __DRI_IMAGE_ATTRIB_STRIDE: u32 = 8192;
pub const __DRI_IMAGE_ATTRIB_HANDLE: u32 = 8193;
pub const __DRI_IMAGE_ATTRIB_NAME: u32 = 8194;
pub const __DRI_IMAGE_ATTRIB_FORMAT: u32 = 8195;
pub const __DRI_IMAGE_ATTRIB_WIDTH: u32 = 8196;
pub const __DRI_IMAGE_ATTRIB_HEIGHT: u32 = 8197;
pub const __DRI_IMAGE_ATTRIB_COMPONENTS: u32 = 8198;
pub const __DRI_IMAGE_ATTRIB_FD: u32 = 8199;
pub const __DRI_IMAGE_ATTRIB_FOURCC: u32 = 8200;
pub const __DRI_IMAGE_ATTRIB_NUM_PLANES: u32 = 8201;
pub const __DRI_IMAGE_ATTRIB_OFFSET: u32 = 8202;
pub const __DRI_IMAGE_ATTRIB_MODIFIER_LOWER: u32 = 8203;
pub const __DRI_IMAGE_ATTRIB_MODIFIER_UPPER: u32 = 8204;
pub const __DRI_IMAGE_ERROR_SUCCESS: u32 = 0;
pub const __DRI_IMAGE_ERROR_BAD_ALLOC: u32 = 1;
pub const __DRI_IMAGE_ERROR_BAD_MATCH: u32 = 2;
pub const __DRI_IMAGE_ERROR_BAD_PARAMETER: u32 = 3;
pub const __DRI_IMAGE_ERROR_BAD_ACCESS: u32 = 4;
pub const __DRI_IMAGE_CAP_GLOBAL_NAMES: u32 = 1;
pub const __BLIT_FLAG_FLUSH: u32 = 1;
pub const __BLIT_FLAG_FINISH: u32 = 2;
pub const __DRI_IMAGE_PROTECTED_CONTENT_FLAG: u32 = 1;
pub const __DRI_IMAGE_FORMAT_MODIFIER_ATTRIB_PLANE_COUNT: u32 = 1;
pub const __DRI_IMAGE_LOOKUP: &'static [u8; 17usize] = b"DRI_IMAGE_LOOKUP\0";
pub const __DRI_IMAGE_LOOKUP_VERSION: u32 = 1;
pub const __DRI2_CONFIG_QUERY: &'static [u8; 17usize] = b"DRI_CONFIG_QUERY\0";
pub const __DRI2_CONFIG_QUERY_VERSION: u32 = 2;
pub const __DRI2_ROBUSTNESS: &'static [u8; 15usize] = b"DRI_Robustness\0";
pub const __DRI2_ROBUSTNESS_VERSION: u32 = 1;
pub const __DRI2_NO_ERROR: &'static [u8; 12usize] = b"DRI_NoError\0";
pub const __DRI2_NO_ERROR_VERSION: u32 = 1;
pub const __DRI2_FLUSH_CONTROL: &'static [u8; 17usize] = b"DRI_FlushControl\0";
pub const __DRI2_FLUSH_CONTROL_VERSION: u32 = 1;
pub const __DRI_CONFIG_OPTIONS: &'static [u8; 18usize] = b"DRI_ConfigOptions\0";
pub const __DRI_CONFIG_OPTIONS_VERSION: u32 = 2;
pub const __DRI_DRIVER_VTABLE: &'static [u8; 17usize] = b"DRI_DriverVtable\0";
pub const __DRI_DRIVER_VTABLE_VERSION: u32 = 1;
pub const __DRI2_RENDERER_QUERY: &'static [u8; 19usize] = b"DRI_RENDERER_QUERY\0";
pub const __DRI2_RENDERER_QUERY_VERSION: u32 = 1;
pub const __DRI2_RENDERER_VENDOR_ID: u32 = 0;
pub const __DRI2_RENDERER_DEVICE_ID: u32 = 1;
pub const __DRI2_RENDERER_VERSION: u32 = 2;
pub const __DRI2_RENDERER_ACCELERATED: u32 = 3;
pub const __DRI2_RENDERER_VIDEO_MEMORY: u32 = 4;
pub const __DRI2_RENDERER_UNIFIED_MEMORY_ARCHITECTURE: u32 = 5;
pub const __DRI2_RENDERER_PREFERRED_PROFILE: u32 = 6;
pub const __DRI2_RENDERER_OPENGL_CORE_PROFILE_VERSION: u32 = 7;
pub const __DRI2_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION: u32 = 8;
pub const __DRI2_RENDERER_OPENGL_ES_PROFILE_VERSION: u32 = 9;
pub const __DRI2_RENDERER_OPENGL_ES2_PROFILE_VERSION: u32 = 10;
pub const __DRI2_RENDERER_HAS_TEXTURE_3D: u32 = 11;
pub const __DRI2_RENDERER_HAS_FRAMEBUFFER_SRGB: u32 = 12;
pub const __DRI2_RENDERER_HAS_CONTEXT_PRIORITY: u32 = 13;
pub const __DRI2_RENDERER_HAS_CONTEXT_PRIORITY_LOW: u32 = 1;
pub const __DRI2_RENDERER_HAS_CONTEXT_PRIORITY_MEDIUM: u32 = 2;
pub const __DRI2_RENDERER_HAS_CONTEXT_PRIORITY_HIGH: u32 = 4;
pub const __DRI2_RENDERER_HAS_PROTECTED_CONTENT: u32 = 14;
pub const __DRI_IMAGE_LOADER: &'static [u8; 17usize] = b"DRI_IMAGE_LOADER\0";
pub const __DRI_IMAGE_LOADER_VERSION: u32 = 4;
pub const __DRI_IMAGE_DRIVER: &'static [u8; 17usize] = b"DRI_IMAGE_DRIVER\0";
pub const __DRI_IMAGE_DRIVER_VERSION: u32 = 1;
pub const __DRI_BACKGROUND_CALLABLE: &'static [u8; 23usize] = b"DRI_BackgroundCallable\0";
pub const __DRI_BACKGROUND_CALLABLE_VERSION: u32 = 1;
pub const __DRI_MUTABLE_RENDER_BUFFER_DRIVER: &'static [u8; 30usize] =
    b"DRI_MutableRenderBufferDriver\0";
pub const __DRI_MUTABLE_RENDER_BUFFER_DRIVER_VERSION: u32 = 1;
pub const __DRI_MUTABLE_RENDER_BUFFER_LOADER: &'static [u8; 30usize] =
    b"DRI_MutableRenderBufferLoader\0";
pub const __DRI_MUTABLE_RENDER_BUFFER_LOADER_VERSION: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type GLboolean = u8;
pub type GLint = ::std::os::raw::c_int;
pub type GLuint = ::std::os::raw::c_uint;
pub type drm_context_t = ::std::os::raw::c_uint;
pub type drm_drawable_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_clip_rect {
    _unused: [u8; 0],
}
pub type drm_clip_rect_t = drm_clip_rect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIdisplayRec {
    _unused: [u8; 0],
}
pub type __DRIdisplay = __DRIdisplayRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIscreenRec {
    _unused: [u8; 0],
}
pub type __DRIscreen = __DRIscreenRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIcontextRec {
    _unused: [u8; 0],
}
pub type __DRIcontext = __DRIcontextRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIdrawableRec {
    _unused: [u8; 0],
}
pub type __DRIdrawable = __DRIdrawableRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIconfigRec {
    _unused: [u8; 0],
}
pub type __DRIconfig = __DRIconfigRec;
pub type __DRIframebuffer = __DRIframebufferRec;
pub type __DRIversion = __DRIversionRec;
pub type __DRIcoreExtension = __DRIcoreExtensionRec;
pub type __DRIextension = __DRIextensionRec;
pub type __DRIcopySubBufferExtension = __DRIcopySubBufferExtensionRec;
pub type __DRIswapControlExtension = __DRIswapControlExtensionRec;
pub type __DRIframeTrackingExtension = __DRIframeTrackingExtensionRec;
pub type __DRImediaStreamCounterExtension = __DRImediaStreamCounterExtensionRec;
pub type __DRItexOffsetExtension = __DRItexOffsetExtensionRec;
pub type __DRItexBufferExtension = __DRItexBufferExtensionRec;
pub type __DRIlegacyExtension = __DRIlegacyExtensionRec;
pub type __DRIswrastExtension = __DRIswrastExtensionRec;
pub type __DRIbuffer = __DRIbufferRec;
pub type __DRIdri2Extension = __DRIdri2ExtensionRec;
pub type __DRIdri2LoaderExtension = __DRIdri2LoaderExtensionRec;
pub type __DRI2flushExtension = __DRI2flushExtensionRec;
pub type __DRI2throttleExtension = __DRI2throttleExtensionRec;
pub type __DRI2fenceExtension = __DRI2fenceExtensionRec;
pub type __DRI2interopExtension = __DRI2interopExtensionRec;
pub type __DRI2blobExtension = __DRI2blobExtensionRec;
pub type __DRI2bufferDamageExtension = __DRI2bufferDamageExtensionRec;
pub type __DRIimageLoaderExtension = __DRIimageLoaderExtensionRec;
pub type __DRIimageDriverExtension = __DRIimageDriverExtensionRec;
#[doc = " Extension struct.  Drivers 'inherit' from this struct by embedding"]
#[doc = " it as the first element in the extension struct."]
#[doc = ""]
#[doc = " We never break API in for a DRI extension.  If we need to change"]
#[doc = " the way things work in a non-backwards compatible manner, we"]
#[doc = " introduce a new extension.  During a transition period, we can"]
#[doc = " leave both the old and the new extension in the driver, which"]
#[doc = " allows us to move to the new interface without having to update the"]
#[doc = " loader(s) in lock step."]
#[doc = ""]
#[doc = " However, we can add entry points to an extension over time as long"]
#[doc = " as we don't break the old ones.  As we add entry points to an"]
#[doc = " extension, we increase the version number.  The corresponding"]
#[doc = " #define can be used to guard code that accesses the new entry"]
#[doc = " points at compile time and the version field in the extension"]
#[doc = " struct can be used at run-time to determine how to use the"]
#[doc = " extension."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIextensionRec {
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___DRIextensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIextensionRec>(),
        16usize,
        concat!("Size of: ", stringify!(__DRIextensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIextensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIextensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIextensionRec>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIextensionRec),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIextensionRec>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIextensionRec),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIcopySubBufferExtensionRec {
    pub base: __DRIextension,
    pub copySubBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout___DRIcopySubBufferExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIcopySubBufferExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRIcopySubBufferExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIcopySubBufferExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIcopySubBufferExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcopySubBufferExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcopySubBufferExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcopySubBufferExtensionRec>())).copySubBuffer as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcopySubBufferExtensionRec),
            "::",
            stringify!(copySubBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIswapControlExtensionRec {
    pub base: __DRIextension,
    pub setSwapInterval: ::std::option::Option<
        unsafe extern "C" fn(drawable: *mut __DRIdrawable, inteval: ::std::os::raw::c_uint),
    >,
    pub getSwapInterval: ::std::option::Option<
        unsafe extern "C" fn(drawable: *mut __DRIdrawable) -> ::std::os::raw::c_uint,
    >,
}
#[test]
fn bindgen_test_layout___DRIswapControlExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIswapControlExtensionRec>(),
        32usize,
        concat!("Size of: ", stringify!(__DRIswapControlExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIswapControlExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIswapControlExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswapControlExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswapControlExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswapControlExtensionRec>())).setSwapInterval as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswapControlExtensionRec),
            "::",
            stringify!(setSwapInterval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswapControlExtensionRec>())).getSwapInterval as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswapControlExtensionRec),
            "::",
            stringify!(getSwapInterval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIframeTrackingExtensionRec {
    pub base: __DRIextension,
    #[doc = " Enable or disable frame usage tracking."]
    #[doc = ""]
    #[doc = " \\since Internal API version 20030317."]
    pub frameTracking: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            enable: GLboolean,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Retrieve frame usage information."]
    #[doc = ""]
    #[doc = " \\since Internal API version 20030317."]
    pub queryFrameTracking: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            sbc: *mut i64,
            missedFrames: *mut i64,
            lastMissedUsage: *mut f32,
            usage: *mut f32,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___DRIframeTrackingExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIframeTrackingExtensionRec>(),
        32usize,
        concat!("Size of: ", stringify!(__DRIframeTrackingExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIframeTrackingExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIframeTrackingExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIframeTrackingExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframeTrackingExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIframeTrackingExtensionRec>())).frameTracking as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframeTrackingExtensionRec),
            "::",
            stringify!(frameTracking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIframeTrackingExtensionRec>())).queryFrameTracking
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframeTrackingExtensionRec),
            "::",
            stringify!(queryFrameTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRImediaStreamCounterExtensionRec {
    pub base: __DRIextension,
    #[doc = " Wait for the MSC to equal target_msc, or, if that has already passed,"]
    #[doc = " the next time (MSC % divisor) is equal to remainder.  If divisor is"]
    #[doc = " zero, the function will return as soon as MSC is greater than or equal"]
    #[doc = " to target_msc."]
    pub waitForMSC: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            target_msc: i64,
            divisor: i64,
            remainder: i64,
            msc: *mut i64,
            sbc: *mut i64,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Get the number of vertical refreshes since some point in time before"]
    #[doc = " this function was first called (i.e., system start up)."]
    pub getDrawableMSC: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            drawable: *mut __DRIdrawable,
            msc: *mut i64,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___DRImediaStreamCounterExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRImediaStreamCounterExtensionRec>(),
        32usize,
        concat!("Size of: ", stringify!(__DRImediaStreamCounterExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRImediaStreamCounterExtensionRec>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__DRImediaStreamCounterExtensionRec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRImediaStreamCounterExtensionRec>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRImediaStreamCounterExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRImediaStreamCounterExtensionRec>())).waitForMSC as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRImediaStreamCounterExtensionRec),
            "::",
            stringify!(waitForMSC)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRImediaStreamCounterExtensionRec>())).getDrawableMSC
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRImediaStreamCounterExtensionRec),
            "::",
            stringify!(getDrawableMSC)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRItexOffsetExtensionRec {
    pub base: __DRIextension,
    #[doc = " Method to override base texture image with a driver specific 'offset'."]
    #[doc = " The depth passed in allows e.g. to ignore the alpha channel of texture"]
    #[doc = " images where the non-alpha components don't occupy a whole texel."]
    #[doc = ""]
    #[doc = " For GLX_EXT_texture_from_pixmap with AIGLX."]
    pub setTexOffset: ::std::option::Option<
        unsafe extern "C" fn(
            pDRICtx: *mut __DRIcontext,
            texname: GLint,
            offset: ::std::os::raw::c_ulonglong,
            depth: GLint,
            pitch: GLuint,
        ),
    >,
}
#[test]
fn bindgen_test_layout___DRItexOffsetExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRItexOffsetExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRItexOffsetExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRItexOffsetExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRItexOffsetExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRItexOffsetExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRItexOffsetExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRItexOffsetExtensionRec>())).setTexOffset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRItexOffsetExtensionRec),
            "::",
            stringify!(setTexOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRItexBufferExtensionRec {
    pub base: __DRIextension,
    #[doc = " Method to override base texture image with the contents of a"]
    #[doc = " __DRIdrawable."]
    #[doc = ""]
    #[doc = " For GLX_EXT_texture_from_pixmap with AIGLX.  Deprecated in favor of"]
    #[doc = " setTexBuffer2 in version 2 of this interface"]
    pub setTexBuffer: ::std::option::Option<
        unsafe extern "C" fn(pDRICtx: *mut __DRIcontext, target: GLint, pDraw: *mut __DRIdrawable),
    >,
    #[doc = " Method to override base texture image with the contents of a"]
    #[doc = " __DRIdrawable, including the required texture format attribute."]
    #[doc = ""]
    #[doc = " For GLX_EXT_texture_from_pixmap with AIGLX."]
    #[doc = ""]
    #[doc = " \\since 2"]
    pub setTexBuffer2: ::std::option::Option<
        unsafe extern "C" fn(
            pDRICtx: *mut __DRIcontext,
            target: GLint,
            format: GLint,
            pDraw: *mut __DRIdrawable,
        ),
    >,
    #[doc = " Method to release texture buffer in case some special platform"]
    #[doc = " need this."]
    #[doc = ""]
    #[doc = " For GLX_EXT_texture_from_pixmap with AIGLX."]
    #[doc = ""]
    #[doc = " \\since 3"]
    pub releaseTexBuffer: ::std::option::Option<
        unsafe extern "C" fn(pDRICtx: *mut __DRIcontext, target: GLint, pDraw: *mut __DRIdrawable),
    >,
}
#[test]
fn bindgen_test_layout___DRItexBufferExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRItexBufferExtensionRec>(),
        40usize,
        concat!("Size of: ", stringify!(__DRItexBufferExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRItexBufferExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRItexBufferExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRItexBufferExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRItexBufferExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRItexBufferExtensionRec>())).setTexBuffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRItexBufferExtensionRec),
            "::",
            stringify!(setTexBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRItexBufferExtensionRec>())).setTexBuffer2 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRItexBufferExtensionRec),
            "::",
            stringify!(setTexBuffer2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRItexBufferExtensionRec>())).releaseTexBuffer as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRItexBufferExtensionRec),
            "::",
            stringify!(releaseTexBuffer)
        )
    );
}
pub const __DRI2throttleReason___DRI2_THROTTLE_SWAPBUFFER: __DRI2throttleReason = 0;
pub const __DRI2throttleReason___DRI2_THROTTLE_COPYSUBBUFFER: __DRI2throttleReason = 1;
pub const __DRI2throttleReason___DRI2_THROTTLE_FLUSHFRONT: __DRI2throttleReason = 2;
pub type __DRI2throttleReason = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2flushExtensionRec {
    pub base: __DRIextension,
    pub flush: ::std::option::Option<unsafe extern "C" fn(drawable: *mut __DRIdrawable)>,
    #[doc = " Ask the driver to call getBuffers/getBuffersWithFormat before"]
    #[doc = " it starts rendering again."]
    #[doc = ""]
    #[doc = " \\param drawable the drawable to invalidate"]
    #[doc = ""]
    #[doc = " \\since 3"]
    pub invalidate: ::std::option::Option<unsafe extern "C" fn(drawable: *mut __DRIdrawable)>,
    #[doc = " This function reduces the number of flushes in the driver by combining"]
    #[doc = " several operations into one call."]
    #[doc = ""]
    #[doc = " It can:"]
    #[doc = " - throttle"]
    #[doc = " - flush a drawable"]
    #[doc = " - flush a context"]
    #[doc = ""]
    #[doc = " \\param context           the context"]
    #[doc = " \\param drawable          the drawable to flush"]
    #[doc = " \\param flags             a combination of _DRI2_FLUSH_xxx flags"]
    #[doc = " \\param throttle_reason   the reason for throttling, 0 = no throttling"]
    #[doc = ""]
    #[doc = " \\since 4"]
    pub flush_with_flags: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut __DRIcontext,
            drawable: *mut __DRIdrawable,
            flags: ::std::os::raw::c_uint,
            throttle_reason: __DRI2throttleReason,
        ),
    >,
}
#[test]
fn bindgen_test_layout___DRI2flushExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2flushExtensionRec>(),
        40usize,
        concat!("Size of: ", stringify!(__DRI2flushExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2flushExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2flushExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRI2flushExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2flushExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRI2flushExtensionRec>())).flush as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2flushExtensionRec),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2flushExtensionRec>())).invalidate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2flushExtensionRec),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2flushExtensionRec>())).flush_with_flags as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2flushExtensionRec),
            "::",
            stringify!(flush_with_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2throttleExtensionRec {
    pub base: __DRIextension,
    pub throttle: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut __DRIcontext,
            drawable: *mut __DRIdrawable,
            reason: __DRI2throttleReason,
        ),
    >,
}
#[test]
fn bindgen_test_layout___DRI2throttleExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2throttleExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRI2throttleExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2throttleExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2throttleExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRI2throttleExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2throttleExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2throttleExtensionRec>())).throttle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2throttleExtensionRec),
            "::",
            stringify!(throttle)
        )
    );
}
pub type __DRIblobCacheSet = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        keySize: ::std::os::raw::c_long,
        value: *const ::std::os::raw::c_void,
        valueSize: ::std::os::raw::c_long,
    ),
>;
pub type __DRIblobCacheGet = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        keySize: ::std::os::raw::c_long,
        value: *mut ::std::os::raw::c_void,
        valueSize: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2blobExtensionRec {
    pub base: __DRIextension,
    #[doc = " Set cache functions for setting and getting cache entries."]
    pub set_cache_funcs: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            set: __DRIblobCacheSet,
            get: __DRIblobCacheGet,
        ),
    >,
}
#[test]
fn bindgen_test_layout___DRI2blobExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2blobExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRI2blobExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2blobExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2blobExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRI2blobExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2blobExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2blobExtensionRec>())).set_cache_funcs as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2blobExtensionRec),
            "::",
            stringify!(set_cache_funcs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2fenceExtensionRec {
    pub base: __DRIextension,
    #[doc = " Create and insert a fence into the command stream of the context."]
    pub create_fence: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut __DRIcontext) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = " Get a fence associated with the OpenCL event object."]
    #[doc = " This can be NULL, meaning that OpenCL interoperability is not supported."]
    pub get_fence_from_cl_event: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            cl_event: isize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = " Destroy a fence."]
    pub destroy_fence: ::std::option::Option<
        unsafe extern "C" fn(screen: *mut __DRIscreen, fence: *mut ::std::os::raw::c_void),
    >,
    #[doc = " This function waits and doesn't return until the fence is signalled"]
    #[doc = " or the timeout expires. It returns true if the fence has been signaled."]
    #[doc = ""]
    #[doc = " \\param ctx     the context where commands are flushed"]
    #[doc = " \\param fence   the fence"]
    #[doc = " \\param flags   a combination of __DRI2_FENCE_FLAG_xxx flags"]
    #[doc = " \\param timeout the timeout in ns or __DRI2_FENCE_TIMEOUT_INFINITE"]
    pub client_wait_sync: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut __DRIcontext,
            fence: *mut ::std::os::raw::c_void,
            flags: ::std::os::raw::c_uint,
            timeout: u64,
        ) -> GLboolean,
    >,
    #[doc = " This function enqueues a wait command into the command stream of"]
    #[doc = " the context and then returns. When the execution reaches the wait"]
    #[doc = " command, no further execution will be done in the context until"]
    #[doc = " the fence is signaled. This is a no-op if the device doesn't support"]
    #[doc = " parallel execution of contexts."]
    #[doc = ""]
    #[doc = " \\param ctx     the context where the waiting is done"]
    #[doc = " \\param fence   the fence"]
    #[doc = " \\param flags   a combination of __DRI2_FENCE_FLAG_xxx flags that make"]
    #[doc = "                sense with this function (right now there are none)"]
    pub server_wait_sync: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut __DRIcontext,
            fence: *mut ::std::os::raw::c_void,
            flags: ::std::os::raw::c_uint,
        ),
    >,
    #[doc = " Query for general capabilities of the driver that concern fences."]
    #[doc = " Returns a bitmask of __DRI_FENCE_CAP_x"]
    #[doc = ""]
    #[doc = " \\since 2"]
    pub get_capabilities: ::std::option::Option<
        unsafe extern "C" fn(screen: *mut __DRIscreen) -> ::std::os::raw::c_uint,
    >,
    #[doc = " Create an fd (file descriptor) associated fence.  If the fence fd"]
    #[doc = " is -1, this behaves similarly to create_fence() except that when"]
    #[doc = " rendering is flushed the driver creates a fence fd.  Otherwise,"]
    #[doc = " the driver wraps an existing fence fd."]
    #[doc = ""]
    #[doc = " This is used to implement the EGL_ANDROID_native_fence_sync extension."]
    #[doc = ""]
    #[doc = " \\since 2"]
    #[doc = ""]
    #[doc = " \\param ctx     the context associated with the fence"]
    #[doc = " \\param fd      the fence fd or -1"]
    pub create_fence_fd: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut __DRIcontext,
            fd: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = " For fences created with create_fence_fd(), after rendering is flushed,"]
    #[doc = " this retrieves the native fence fd.  Caller takes ownership of the"]
    #[doc = " fd and will close() it when it is no longer needed."]
    #[doc = ""]
    #[doc = " \\since 2"]
    #[doc = ""]
    #[doc = " \\param screen  the screen associated with the fence"]
    #[doc = " \\param fence   the fence"]
    pub get_fence_fd: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            fence: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___DRI2fenceExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2fenceExtensionRec>(),
        80usize,
        concat!("Size of: ", stringify!(__DRI2fenceExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2fenceExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2fenceExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).create_fence as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(create_fence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).get_fence_from_cl_event as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(get_fence_from_cl_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).destroy_fence as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(destroy_fence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).client_wait_sync as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(client_wait_sync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).server_wait_sync as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(server_wait_sync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).get_capabilities as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(get_capabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).create_fence_fd as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(create_fence_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2fenceExtensionRec>())).get_fence_fd as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2fenceExtensionRec),
            "::",
            stringify!(get_fence_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mesa_glinterop_device_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mesa_glinterop_export_in {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mesa_glinterop_export_out {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2interopExtensionRec {
    pub base: __DRIextension,
    #[doc = " Same as MesaGLInterop*QueryDeviceInfo."]
    pub query_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut __DRIcontext,
            out: *mut mesa_glinterop_device_info,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Same as MesaGLInterop*ExportObject."]
    pub export_object: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut __DRIcontext,
            in_: *mut mesa_glinterop_export_in,
            out: *mut mesa_glinterop_export_out,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___DRI2interopExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2interopExtensionRec>(),
        32usize,
        concat!("Size of: ", stringify!(__DRI2interopExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2interopExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2interopExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRI2interopExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2interopExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2interopExtensionRec>())).query_device_info as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2interopExtensionRec),
            "::",
            stringify!(query_device_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2interopExtensionRec>())).export_object as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2interopExtensionRec),
            "::",
            stringify!(export_object)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2bufferDamageExtensionRec {
    pub base: __DRIextension,
    #[doc = " Provides an array of rectangles representing an overriding scissor region"]
    #[doc = " for rendering operations performed to the specified drawable. These"]
    #[doc = " rectangles do not replace client API scissor regions or draw"]
    #[doc = " co-ordinates, but instead inform the driver of the overall bounds of all"]
    #[doc = " operations which will be issued before the next flush."]
    #[doc = ""]
    #[doc = " Any rendering operations writing pixels outside this region to the"]
    #[doc = " drawable will have an undefined effect on the entire drawable."]
    #[doc = ""]
    #[doc = " This entrypoint may only be called after the drawable has either been"]
    #[doc = " newly created or flushed, and before any rendering operations which write"]
    #[doc = " pixels to the drawable. Calling this entrypoint at any other time will"]
    #[doc = " have an undefined effect on the entire drawable."]
    #[doc = ""]
    #[doc = " Calling this entrypoint with @nrects 0 and @rects NULL will reset the"]
    #[doc = " region to the buffer's full size. This entrypoint may be called once to"]
    #[doc = " reset the region, followed by a second call with a populated region,"]
    #[doc = " before a rendering call is made."]
    #[doc = ""]
    #[doc = " Used to implement EGL_KHR_partial_update."]
    #[doc = ""]
    #[doc = " \\param drawable affected drawable"]
    #[doc = " \\param nrects   number of rectangles provided"]
    #[doc = " \\param rects    the array of rectangles, lower-left origin"]
    pub set_damage_region: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            nrects: ::std::os::raw::c_uint,
            rects: *mut ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout___DRI2bufferDamageExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2bufferDamageExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRI2bufferDamageExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2bufferDamageExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2bufferDamageExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2bufferDamageExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2bufferDamageExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2bufferDamageExtensionRec>())).set_damage_region as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2bufferDamageExtensionRec),
            "::",
            stringify!(set_damage_region)
        )
    );
}
#[doc = " The following extensions describe loader features that the DRI"]
#[doc = " driver can make use of.  Some of these are mandatory, such as the"]
#[doc = " getDrawableInfo extension for DRI and the DRI Loader extensions for"]
#[doc = " DRI2, while others are optional, and if present allow the driver to"]
#[doc = " expose certain features.  The loader pass in a NULL terminated"]
#[doc = " array of these extensions to the driver in the createNewScreen"]
#[doc = " constructor."]
pub type __DRIgetDrawableInfoExtension = __DRIgetDrawableInfoExtensionRec;
pub type __DRIsystemTimeExtension = __DRIsystemTimeExtensionRec;
pub type __DRIdamageExtension = __DRIdamageExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIloaderExtensionRec {
    _unused: [u8; 0],
}
pub type __DRIloaderExtension = __DRIloaderExtensionRec;
pub type __DRIswrastLoaderExtension = __DRIswrastLoaderExtensionRec;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __DRIgetDrawableInfoExtensionRec {
    pub base: __DRIextension,
    #[doc = " This function is used to get information about the position, size, and"]
    #[doc = " clip rects of a drawable."]
    pub getDrawableInfo: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            index: *mut ::std::os::raw::c_uint,
            stamp: *mut ::std::os::raw::c_uint,
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            width: *mut ::std::os::raw::c_int,
            height: *mut ::std::os::raw::c_int,
            numClipRects: *mut ::std::os::raw::c_int,
            pClipRects: *mut *mut drm_clip_rect_t,
            backX: *mut ::std::os::raw::c_int,
            backY: *mut ::std::os::raw::c_int,
            numBackClipRects: *mut ::std::os::raw::c_int,
            pBackClipRects: *mut *mut drm_clip_rect_t,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> GLboolean,
    >,
}
#[test]
fn bindgen_test_layout___DRIgetDrawableInfoExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIgetDrawableInfoExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRIgetDrawableInfoExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIgetDrawableInfoExtensionRec>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__DRIgetDrawableInfoExtensionRec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIgetDrawableInfoExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIgetDrawableInfoExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIgetDrawableInfoExtensionRec>())).getDrawableInfo as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIgetDrawableInfoExtensionRec),
            "::",
            stringify!(getDrawableInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIsystemTimeExtensionRec {
    pub base: __DRIextension,
    #[doc = " Get the 64-bit unadjusted system time (UST)."]
    pub getUST: ::std::option::Option<unsafe extern "C" fn(ust: *mut i64) -> ::std::os::raw::c_int>,
    #[doc = " Get the media stream counter (MSC) rate."]
    #[doc = ""]
    #[doc = " Matching the definition in GLX_OML_sync_control, this function returns"]
    #[doc = " the rate of the \"media stream counter\".  In practical terms, this is"]
    #[doc = " the frame refresh rate of the display."]
    pub getMSCRate: ::std::option::Option<
        unsafe extern "C" fn(
            draw: *mut __DRIdrawable,
            numerator: *mut i32,
            denominator: *mut i32,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> GLboolean,
    >,
}
#[test]
fn bindgen_test_layout___DRIsystemTimeExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIsystemTimeExtensionRec>(),
        32usize,
        concat!("Size of: ", stringify!(__DRIsystemTimeExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIsystemTimeExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIsystemTimeExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIsystemTimeExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIsystemTimeExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIsystemTimeExtensionRec>())).getUST as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIsystemTimeExtensionRec),
            "::",
            stringify!(getUST)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIsystemTimeExtensionRec>())).getMSCRate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIsystemTimeExtensionRec),
            "::",
            stringify!(getMSCRate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIdamageExtensionRec {
    pub base: __DRIextension,
    #[doc = " Reports areas of the given drawable which have been modified by the"]
    #[doc = " driver."]
    #[doc = ""]
    #[doc = " \\param drawable which the drawing was done to."]
    #[doc = " \\param rects rectangles affected, with the drawable origin as the"]
    #[doc = "\t      origin."]
    #[doc = " \\param x X offset of the drawable within the screen (used in the"]
    #[doc = "\t      front_buffer case)"]
    #[doc = " \\param y Y offset of the drawable within the screen."]
    #[doc = " \\param front_buffer boolean flag for whether the drawing to the"]
    #[doc = " \t      drawable was actually done directly to the front buffer (instead"]
    #[doc = "\t      of backing storage, for example)"]
    #[doc = " \\param loaderPrivate the data passed in at createNewDrawable time"]
    pub reportDamage: ::std::option::Option<
        unsafe extern "C" fn(
            draw: *mut __DRIdrawable,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            rects: *mut drm_clip_rect_t,
            num_rects: ::std::os::raw::c_int,
            front_buffer: GLboolean,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___DRIdamageExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIdamageExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRIdamageExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIdamageExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIdamageExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIdamageExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdamageExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdamageExtensionRec>())).reportDamage as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdamageExtensionRec),
            "::",
            stringify!(reportDamage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIswrastLoaderExtensionRec {
    pub base: __DRIextension,
    pub getDrawableInfo: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            width: *mut ::std::os::raw::c_int,
            height: *mut ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Put image to drawable"]
    pub putImage: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            op: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_char,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Get image from readable"]
    pub getImage: ::std::option::Option<
        unsafe extern "C" fn(
            readable: *mut __DRIdrawable,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_char,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Put image to drawable"]
    #[doc = ""]
    #[doc = " \\since 2"]
    pub putImage2: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            op: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            stride: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_char,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Put image to drawable"]
    #[doc = ""]
    #[doc = " \\since 3"]
    pub getImage2: ::std::option::Option<
        unsafe extern "C" fn(
            readable: *mut __DRIdrawable,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            stride: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_char,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Put shm image to drawable"]
    #[doc = ""]
    #[doc = " \\since 4"]
    pub putImageShm: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            op: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            stride: ::std::os::raw::c_int,
            shmid: ::std::os::raw::c_int,
            shmaddr: *mut ::std::os::raw::c_char,
            offset: ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Get shm image from readable"]
    #[doc = ""]
    #[doc = " \\since 4"]
    pub getImageShm: ::std::option::Option<
        unsafe extern "C" fn(
            readable: *mut __DRIdrawable,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            shmid: ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Put shm image to drawable (v2)"]
    #[doc = ""]
    #[doc = " The original version fixes srcx/y to 0, and expected"]
    #[doc = " the offset to be adjusted. This version allows src x,y"]
    #[doc = " to not be included in the offset. This is needed to"]
    #[doc = " avoid certain overflow checks in the X server, that"]
    #[doc = " result in lost rendering."]
    #[doc = ""]
    #[doc = " \\since 5"]
    pub putImageShm2: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            op: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            stride: ::std::os::raw::c_int,
            shmid: ::std::os::raw::c_int,
            shmaddr: *mut ::std::os::raw::c_char,
            offset: ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " get shm image to drawable (v2)"]
    #[doc = ""]
    #[doc = " There are some cases where GLX can't use SHM, but DRI"]
    #[doc = " still tries, we need to get a return type for when to"]
    #[doc = " fallback to the non-shm path."]
    #[doc = ""]
    #[doc = " \\since 6"]
    pub getImageShm2: ::std::option::Option<
        unsafe extern "C" fn(
            readable: *mut __DRIdrawable,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            shmid: ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> GLboolean,
    >,
}
#[test]
fn bindgen_test_layout___DRIswrastLoaderExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIswrastLoaderExtensionRec>(),
        88usize,
        concat!("Size of: ", stringify!(__DRIswrastLoaderExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIswrastLoaderExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIswrastLoaderExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).getDrawableInfo as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(getDrawableInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).putImage as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(putImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).getImage as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(getImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).putImage2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(putImage2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).getImage2 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(getImage2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).putImageShm as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(putImageShm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).getImageShm as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(getImageShm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).putImageShm2 as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(putImageShm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastLoaderExtensionRec>())).getImageShm2 as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastLoaderExtensionRec),
            "::",
            stringify!(getImageShm2)
        )
    );
}
pub type __DRIuseInvalidateExtension = __DRIuseInvalidateExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIuseInvalidateExtensionRec {
    pub base: __DRIextension,
}
#[test]
fn bindgen_test_layout___DRIuseInvalidateExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIuseInvalidateExtensionRec>(),
        16usize,
        concat!("Size of: ", stringify!(__DRIuseInvalidateExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIuseInvalidateExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIuseInvalidateExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIuseInvalidateExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIuseInvalidateExtensionRec),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIcoreExtensionRec {
    pub base: __DRIextension,
    pub createNewScreen: ::std::option::Option<
        unsafe extern "C" fn(
            screen: ::std::os::raw::c_int,
            fd: ::std::os::raw::c_int,
            sarea_handle: ::std::os::raw::c_uint,
            extensions: *mut *const __DRIextension,
            driverConfigs: *mut *mut *const __DRIconfig,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIscreen,
    >,
    pub destroyScreen: ::std::option::Option<unsafe extern "C" fn(screen: *mut __DRIscreen)>,
    pub getExtensions: ::std::option::Option<
        unsafe extern "C" fn(screen: *mut __DRIscreen) -> *mut *const __DRIextension,
    >,
    pub getConfigAttrib: ::std::option::Option<
        unsafe extern "C" fn(
            config: *const __DRIconfig,
            attrib: ::std::os::raw::c_uint,
            value: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub indexConfigAttrib: ::std::option::Option<
        unsafe extern "C" fn(
            config: *const __DRIconfig,
            index: ::std::os::raw::c_int,
            attrib: *mut ::std::os::raw::c_uint,
            value: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub createNewDrawable: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            config: *const __DRIconfig,
            drawable_id: ::std::os::raw::c_uint,
            head: ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIdrawable,
    >,
    pub destroyDrawable: ::std::option::Option<unsafe extern "C" fn(drawable: *mut __DRIdrawable)>,
    pub swapBuffers: ::std::option::Option<unsafe extern "C" fn(drawable: *mut __DRIdrawable)>,
    pub createNewContext: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            config: *const __DRIconfig,
            shared: *mut __DRIcontext,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIcontext,
    >,
    pub copyContext: ::std::option::Option<
        unsafe extern "C" fn(
            dest: *mut __DRIcontext,
            src: *mut __DRIcontext,
            mask: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub destroyContext: ::std::option::Option<unsafe extern "C" fn(context: *mut __DRIcontext)>,
    pub bindContext: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut __DRIcontext,
            pdraw: *mut __DRIdrawable,
            pread: *mut __DRIdrawable,
        ) -> ::std::os::raw::c_int,
    >,
    pub unbindContext: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut __DRIcontext) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___DRIcoreExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIcoreExtensionRec>(),
        120usize,
        concat!("Size of: ", stringify!(__DRIcoreExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIcoreExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIcoreExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).createNewScreen as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(createNewScreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).destroyScreen as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(destroyScreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).getExtensions as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(getExtensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).getConfigAttrib as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(getConfigAttrib)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).indexConfigAttrib as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(indexConfigAttrib)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).createNewDrawable as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(createNewDrawable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).destroyDrawable as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(destroyDrawable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).swapBuffers as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(swapBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).createNewContext as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(createNewContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).copyContext as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(copyContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).destroyContext as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(destroyContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).bindContext as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(bindContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIcoreExtensionRec>())).unbindContext as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIcoreExtensionRec),
            "::",
            stringify!(unbindContext)
        )
    );
}
#[doc = " Stored version of some component (i.e., server-side DRI module, kernel-side"]
#[doc = " DRM, etc.)."]
#[doc = ""]
#[doc = " \\todo"]
#[doc = " There are several data structures that explicitly store a major version,"]
#[doc = " minor version, and patch level.  These structures should be modified to"]
#[doc = " have a \\c __DRIversionRec instead."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIversionRec {
    #[doc = "< Major version number."]
    pub major: ::std::os::raw::c_int,
    #[doc = "< Minor version number."]
    pub minor: ::std::os::raw::c_int,
    #[doc = "< Patch-level."]
    pub patch: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___DRIversionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIversionRec>(),
        12usize,
        concat!("Size of: ", stringify!(__DRIversionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIversionRec>(),
        4usize,
        concat!("Alignment of ", stringify!(__DRIversionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIversionRec>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIversionRec),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIversionRec>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIversionRec),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIversionRec>())).patch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIversionRec),
            "::",
            stringify!(patch)
        )
    );
}
#[doc = " Framebuffer information record.  Used by libGL to communicate information"]
#[doc = " about the framebuffer to the driver's \\c __driCreateNewScreen function."]
#[doc = ""]
#[doc = " In XFree86, most of this information is derrived from data returned by"]
#[doc = " calling \\c XF86DRIGetDeviceInfo."]
#[doc = ""]
#[doc = " \\sa XF86DRIGetDeviceInfo __DRIdisplayRec::createNewScreen"]
#[doc = "     __driUtilCreateNewScreen CallCreateNewScreen"]
#[doc = ""]
#[doc = " \\bug This structure could be better named."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIframebufferRec {
    #[doc = "< Framebuffer base address in the CPU's"]
    #[doc = " address space.  This value is calculated by"]
    #[doc = " calling \\c drmMap on the framebuffer handle"]
    #[doc = " returned by \\c XF86DRIGetDeviceInfo (or a"]
    #[doc = " similar function)."]
    pub base: *mut ::std::os::raw::c_uchar,
    #[doc = "< Framebuffer size, in bytes."]
    pub size: ::std::os::raw::c_int,
    #[doc = "< Number of bytes from one line to the next."]
    pub stride: ::std::os::raw::c_int,
    #[doc = "< Pixel width of the framebuffer."]
    pub width: ::std::os::raw::c_int,
    #[doc = "< Pixel height of the framebuffer."]
    pub height: ::std::os::raw::c_int,
    #[doc = "< Size of the driver's dev-priv structure."]
    pub dev_priv_size: ::std::os::raw::c_int,
    #[doc = "< Pointer to the driver's dev-priv structure."]
    pub dev_priv: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___DRIframebufferRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIframebufferRec>(),
        40usize,
        concat!("Size of: ", stringify!(__DRIframebufferRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIframebufferRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIframebufferRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIframebufferRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframebufferRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIframebufferRec>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframebufferRec),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIframebufferRec>())).stride as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframebufferRec),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIframebufferRec>())).width as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframebufferRec),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIframebufferRec>())).height as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframebufferRec),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIframebufferRec>())).dev_priv_size as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframebufferRec),
            "::",
            stringify!(dev_priv_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIframebufferRec>())).dev_priv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIframebufferRec),
            "::",
            stringify!(dev_priv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIlegacyExtensionRec {
    pub base: __DRIextension,
    pub createNewScreen: ::std::option::Option<
        unsafe extern "C" fn(
            screen: ::std::os::raw::c_int,
            ddx_version: *const __DRIversion,
            dri_version: *const __DRIversion,
            drm_version: *const __DRIversion,
            frame_buffer: *const __DRIframebuffer,
            pSAREA: *mut ::std::os::raw::c_void,
            fd: ::std::os::raw::c_int,
            extensions: *mut *const __DRIextension,
            driver_configs: *mut *mut *const __DRIconfig,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIscreen,
    >,
    pub createNewDrawable: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            config: *const __DRIconfig,
            hwDrawable: drm_drawable_t,
            renderType: ::std::os::raw::c_int,
            attrs: *const ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIdrawable,
    >,
    pub createNewContext: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            config: *const __DRIconfig,
            render_type: ::std::os::raw::c_int,
            shared: *mut __DRIcontext,
            hwContext: drm_context_t,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIcontext,
    >,
}
#[test]
fn bindgen_test_layout___DRIlegacyExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIlegacyExtensionRec>(),
        40usize,
        concat!("Size of: ", stringify!(__DRIlegacyExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIlegacyExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIlegacyExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIlegacyExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIlegacyExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIlegacyExtensionRec>())).createNewScreen as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIlegacyExtensionRec),
            "::",
            stringify!(createNewScreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIlegacyExtensionRec>())).createNewDrawable as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIlegacyExtensionRec),
            "::",
            stringify!(createNewDrawable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIlegacyExtensionRec>())).createNewContext as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIlegacyExtensionRec),
            "::",
            stringify!(createNewContext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIswrastExtensionRec {
    pub base: __DRIextension,
    pub createNewScreen: ::std::option::Option<
        unsafe extern "C" fn(
            screen: ::std::os::raw::c_int,
            extensions: *mut *const __DRIextension,
            driver_configs: *mut *mut *const __DRIconfig,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIscreen,
    >,
    pub createNewDrawable: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            config: *const __DRIconfig,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIdrawable,
    >,
    pub createNewContextForAPI: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            api: ::std::os::raw::c_int,
            config: *const __DRIconfig,
            shared: *mut __DRIcontext,
            data: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIcontext,
    >,
    #[doc = " Create a context for a particular API with a set of attributes"]
    #[doc = ""]
    #[doc = " \\since version 3"]
    #[doc = ""]
    #[doc = " \\sa __DRIdri2ExtensionRec::createContextAttribs"]
    pub createContextAttribs: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            api: ::std::os::raw::c_int,
            config: *const __DRIconfig,
            shared: *mut __DRIcontext,
            num_attribs: ::std::os::raw::c_uint,
            attribs: *const u32,
            error: *mut ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIcontext,
    >,
    #[doc = " createNewScreen() with the driver extensions passed in."]
    #[doc = ""]
    #[doc = " \\since version 4"]
    pub createNewScreen2: ::std::option::Option<
        unsafe extern "C" fn(
            screen: ::std::os::raw::c_int,
            loader_extensions: *mut *const __DRIextension,
            driver_extensions: *mut *const __DRIextension,
            driver_configs: *mut *mut *const __DRIconfig,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIscreen,
    >,
}
#[test]
fn bindgen_test_layout___DRIswrastExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIswrastExtensionRec>(),
        56usize,
        concat!("Size of: ", stringify!(__DRIswrastExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIswrastExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIswrastExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIswrastExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastExtensionRec>())).createNewScreen as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastExtensionRec),
            "::",
            stringify!(createNewScreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastExtensionRec>())).createNewDrawable as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastExtensionRec),
            "::",
            stringify!(createNewDrawable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastExtensionRec>())).createNewContextForAPI as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastExtensionRec),
            "::",
            stringify!(createNewContextForAPI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastExtensionRec>())).createContextAttribs as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastExtensionRec),
            "::",
            stringify!(createContextAttribs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIswrastExtensionRec>())).createNewScreen2 as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIswrastExtensionRec),
            "::",
            stringify!(createNewScreen2)
        )
    );
}
#[doc = " Common DRI function definitions, shared among DRI2 and Image extensions"]
pub type __DRIcreateNewScreen2Func = ::std::option::Option<
    unsafe extern "C" fn(
        screen: ::std::os::raw::c_int,
        fd: ::std::os::raw::c_int,
        extensions: *mut *const __DRIextension,
        driver_extensions: *mut *const __DRIextension,
        driver_configs: *mut *mut *const __DRIconfig,
        loaderPrivate: *mut ::std::os::raw::c_void,
    ) -> *mut __DRIscreen,
>;
pub type __DRIcreateNewDrawableFunc = ::std::option::Option<
    unsafe extern "C" fn(
        screen: *mut __DRIscreen,
        config: *const __DRIconfig,
        loaderPrivate: *mut ::std::os::raw::c_void,
    ) -> *mut __DRIdrawable,
>;
pub type __DRIcreateContextAttribsFunc = ::std::option::Option<
    unsafe extern "C" fn(
        screen: *mut __DRIscreen,
        api: ::std::os::raw::c_int,
        config: *const __DRIconfig,
        shared: *mut __DRIcontext,
        num_attribs: ::std::os::raw::c_uint,
        attribs: *const u32,
        error: *mut ::std::os::raw::c_uint,
        loaderPrivate: *mut ::std::os::raw::c_void,
    ) -> *mut __DRIcontext,
>;
pub type __DRIgetAPIMaskFunc =
    ::std::option::Option<unsafe extern "C" fn(screen: *mut __DRIscreen) -> ::std::os::raw::c_uint>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIbufferRec {
    pub attachment: ::std::os::raw::c_uint,
    pub name: ::std::os::raw::c_uint,
    pub pitch: ::std::os::raw::c_uint,
    pub cpp: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___DRIbufferRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIbufferRec>(),
        20usize,
        concat!("Size of: ", stringify!(__DRIbufferRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIbufferRec>(),
        4usize,
        concat!("Alignment of ", stringify!(__DRIbufferRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIbufferRec>())).attachment as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIbufferRec),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIbufferRec>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIbufferRec),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIbufferRec>())).pitch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIbufferRec),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIbufferRec>())).cpp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIbufferRec),
            "::",
            stringify!(cpp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIbufferRec>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIbufferRec),
            "::",
            stringify!(flags)
        )
    );
}
pub const dri_loader_cap_DRI_LOADER_CAP_RGBA_ORDERING: dri_loader_cap = 0;
pub const dri_loader_cap_DRI_LOADER_CAP_FP16: dri_loader_cap = 1;
pub type dri_loader_cap = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIdri2LoaderExtensionRec {
    pub base: __DRIextension,
    pub getBuffers: ::std::option::Option<
        unsafe extern "C" fn(
            driDrawable: *mut __DRIdrawable,
            width: *mut ::std::os::raw::c_int,
            height: *mut ::std::os::raw::c_int,
            attachments: *mut ::std::os::raw::c_uint,
            count: ::std::os::raw::c_int,
            out_count: *mut ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIbuffer,
    >,
    #[doc = " Flush pending front-buffer rendering"]
    #[doc = ""]
    #[doc = " Any rendering that has been performed to the"]
    #[doc = " \\c __DRI_BUFFER_FAKE_FRONT_LEFT will be flushed to the"]
    #[doc = " \\c __DRI_BUFFER_FRONT_LEFT."]
    #[doc = ""]
    #[doc = " \\param driDrawable    Drawable whose front-buffer is to be flushed"]
    #[doc = " \\param loaderPrivate  Loader's private data that was previously passed"]
    #[doc = "                       into __DRIdri2ExtensionRec::createNewDrawable"]
    #[doc = ""]
    #[doc = " \\since 2"]
    pub flushFrontBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            driDrawable: *mut __DRIdrawable,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Get list of buffers from the server"]
    #[doc = ""]
    #[doc = " Gets a list of buffer for the specified set of attachments.  Unlike"]
    #[doc = " \\c ::getBuffers, this function takes a list of attachments paired with"]
    #[doc = " opaque \\c unsigned \\c int value describing the format of the buffer."]
    #[doc = " It is the responsibility of the caller to know what the service that"]
    #[doc = " allocates the buffers will expect to receive for the format."]
    #[doc = ""]
    #[doc = " \\param driDrawable    Drawable whose buffers are being queried."]
    #[doc = " \\param width          Output where the width of the buffers is stored."]
    #[doc = " \\param height         Output where the height of the buffers is stored."]
    #[doc = " \\param attachments    List of pairs of attachment ID and opaque format"]
    #[doc = "                       requested for the drawable."]
    #[doc = " \\param count          Number of attachment / format pairs stored in"]
    #[doc = "                       \\c attachments."]
    #[doc = " \\param loaderPrivate  Loader's private data that was previously passed"]
    #[doc = "                       into __DRIdri2ExtensionRec::createNewDrawable."]
    #[doc = ""]
    #[doc = " \\since 3"]
    pub getBuffersWithFormat: ::std::option::Option<
        unsafe extern "C" fn(
            driDrawable: *mut __DRIdrawable,
            width: *mut ::std::os::raw::c_int,
            height: *mut ::std::os::raw::c_int,
            attachments: *mut ::std::os::raw::c_uint,
            count: ::std::os::raw::c_int,
            out_count: *mut ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIbuffer,
    >,
    #[doc = " Return a loader capability value. If the loader doesn't know the enum,"]
    #[doc = " it will return 0."]
    #[doc = ""]
    #[doc = " \\param loaderPrivate The last parameter of createNewScreen or"]
    #[doc = "                      createNewScreen2."]
    #[doc = " \\param cap           See the enum."]
    #[doc = ""]
    #[doc = " \\since 4"]
    pub getCapability: ::std::option::Option<
        unsafe extern "C" fn(
            loaderPrivate: *mut ::std::os::raw::c_void,
            cap: dri_loader_cap,
        ) -> ::std::os::raw::c_uint,
    >,
    #[doc = " Clean up any loader state associated with an image."]
    #[doc = ""]
    #[doc = " \\param loaderPrivate  Loader's private data that was previously passed"]
    #[doc = "                       into a __DRIimageExtensionRec::createImage function"]
    #[doc = " \\since 5"]
    pub destroyLoaderImageState:
        ::std::option::Option<unsafe extern "C" fn(loaderPrivate: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout___DRIdri2LoaderExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIdri2LoaderExtensionRec>(),
        56usize,
        concat!("Size of: ", stringify!(__DRIdri2LoaderExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIdri2LoaderExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIdri2LoaderExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2LoaderExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2LoaderExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2LoaderExtensionRec>())).getBuffers as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2LoaderExtensionRec),
            "::",
            stringify!(getBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2LoaderExtensionRec>())).flushFrontBuffer as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2LoaderExtensionRec),
            "::",
            stringify!(flushFrontBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2LoaderExtensionRec>())).getBuffersWithFormat as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2LoaderExtensionRec),
            "::",
            stringify!(getBuffersWithFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2LoaderExtensionRec>())).getCapability as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2LoaderExtensionRec),
            "::",
            stringify!(getCapability)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2LoaderExtensionRec>())).destroyLoaderImageState
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2LoaderExtensionRec),
            "::",
            stringify!(destroyLoaderImageState)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIdri2ExtensionRec {
    pub base: __DRIextension,
    pub createNewScreen: ::std::option::Option<
        unsafe extern "C" fn(
            screen: ::std::os::raw::c_int,
            fd: ::std::os::raw::c_int,
            extensions: *mut *const __DRIextension,
            driver_configs: *mut *mut *const __DRIconfig,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIscreen,
    >,
    pub createNewDrawable: __DRIcreateNewDrawableFunc,
    pub createNewContext: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            config: *const __DRIconfig,
            shared: *mut __DRIcontext,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIcontext,
    >,
    pub getAPIMask: __DRIgetAPIMaskFunc,
    pub createNewContextForAPI: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            api: ::std::os::raw::c_int,
            config: *const __DRIconfig,
            shared: *mut __DRIcontext,
            data: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIcontext,
    >,
    pub allocateBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            attachment: ::std::os::raw::c_uint,
            format: ::std::os::raw::c_uint,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> *mut __DRIbuffer,
    >,
    pub releaseBuffer: ::std::option::Option<
        unsafe extern "C" fn(screen: *mut __DRIscreen, buffer: *mut __DRIbuffer),
    >,
    #[doc = " Create a context for a particular API with a set of attributes"]
    #[doc = ""]
    #[doc = " \\since version 3"]
    #[doc = ""]
    #[doc = " \\sa __DRIswrastExtensionRec::createContextAttribs"]
    pub createContextAttribs: __DRIcreateContextAttribsFunc,
    #[doc = " createNewScreen with the driver's extension list passed in."]
    #[doc = ""]
    #[doc = " \\since version 4"]
    pub createNewScreen2: __DRIcreateNewScreen2Func,
}
#[test]
fn bindgen_test_layout___DRIdri2ExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIdri2ExtensionRec>(),
        88usize,
        concat!("Size of: ", stringify!(__DRIdri2ExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIdri2ExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIdri2ExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).createNewScreen as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(createNewScreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).createNewDrawable as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(createNewDrawable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).createNewContext as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(createNewContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).getAPIMask as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(getAPIMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).createNewContextForAPI as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(createNewContextForAPI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).allocateBuffer as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(allocateBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).releaseBuffer as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(releaseBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).createContextAttribs as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(createContextAttribs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIdri2ExtensionRec>())).createNewScreen2 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIdri2ExtensionRec),
            "::",
            stringify!(createNewScreen2)
        )
    );
}
pub const __DRIYUVColorSpace___DRI_YUV_COLOR_SPACE_UNDEFINED: __DRIYUVColorSpace = 0;
pub const __DRIYUVColorSpace___DRI_YUV_COLOR_SPACE_ITU_REC601: __DRIYUVColorSpace = 12927;
pub const __DRIYUVColorSpace___DRI_YUV_COLOR_SPACE_ITU_REC709: __DRIYUVColorSpace = 12928;
pub const __DRIYUVColorSpace___DRI_YUV_COLOR_SPACE_ITU_REC2020: __DRIYUVColorSpace = 12929;
pub type __DRIYUVColorSpace = ::std::os::raw::c_uint;
pub const __DRISampleRange___DRI_YUV_RANGE_UNDEFINED: __DRISampleRange = 0;
pub const __DRISampleRange___DRI_YUV_FULL_RANGE: __DRISampleRange = 12930;
pub const __DRISampleRange___DRI_YUV_NARROW_RANGE: __DRISampleRange = 12931;
pub type __DRISampleRange = ::std::os::raw::c_uint;
pub const __DRIChromaSiting___DRI_YUV_CHROMA_SITING_UNDEFINED: __DRIChromaSiting = 0;
pub const __DRIChromaSiting___DRI_YUV_CHROMA_SITING_0: __DRIChromaSiting = 12932;
pub const __DRIChromaSiting___DRI_YUV_CHROMA_SITING_0_5: __DRIChromaSiting = 12933;
pub type __DRIChromaSiting = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIimageRec {
    _unused: [u8; 0],
}
pub type __DRIimage = __DRIimageRec;
pub type __DRIimageExtension = __DRIimageExtensionRec;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __DRIimageExtensionRec {
    pub base: __DRIextension,
    pub createImageFromName: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            format: ::std::os::raw::c_int,
            name: ::std::os::raw::c_int,
            pitch: ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    pub createImageFromRenderbuffer: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut __DRIcontext,
            renderbuffer: ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    pub destroyImage: ::std::option::Option<unsafe extern "C" fn(image: *mut __DRIimage)>,
    pub createImage: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            format: ::std::os::raw::c_int,
            use_: ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    pub queryImage: ::std::option::Option<
        unsafe extern "C" fn(
            image: *mut __DRIimage,
            attrib: ::std::os::raw::c_int,
            value: *mut ::std::os::raw::c_int,
        ) -> GLboolean,
    >,
    #[doc = " The new __DRIimage will share the content with the old one, see dup(2)."]
    pub dupImage: ::std::option::Option<
        unsafe extern "C" fn(
            image: *mut __DRIimage,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    #[doc = " Validate that a __DRIimage can be used a certain way."]
    #[doc = ""]
    #[doc = " \\since 2"]
    pub validateUsage: ::std::option::Option<
        unsafe extern "C" fn(image: *mut __DRIimage, use_: ::std::os::raw::c_uint) -> GLboolean,
    >,
    #[doc = " Unlike createImageFromName __DRI_IMAGE_FORMAT is not used but instead"]
    #[doc = " DRM_FORMAT_*, and strides are in bytes not pixels. Stride is"]
    #[doc = " also per block and not per pixel (for non-RGB, see gallium blocks)."]
    #[doc = ""]
    #[doc = " \\since 5"]
    pub createImageFromNames: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            fourcc: ::std::os::raw::c_int,
            names: *mut ::std::os::raw::c_int,
            num_names: ::std::os::raw::c_int,
            strides: *mut ::std::os::raw::c_int,
            offsets: *mut ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    #[doc = " Create an image out of a sub-region of a parent image.  This"]
    #[doc = " entry point lets us create individual __DRIimages for different"]
    #[doc = " planes in a planar buffer (typically yuv), for example.  While a"]
    #[doc = " sub-image shares the underlying buffer object with the parent"]
    #[doc = " image and other sibling sub-images, the life times of parent and"]
    #[doc = " sub-images are not dependent.  Destroying the parent or a"]
    #[doc = " sub-image doesn't affect other images.  The underlying buffer"]
    #[doc = " object is free when no __DRIimage remains that references it."]
    #[doc = ""]
    #[doc = " Sub-images may overlap, but rendering to overlapping sub-images"]
    #[doc = " is undefined."]
    #[doc = ""]
    #[doc = " \\since 5"]
    pub fromPlanar: ::std::option::Option<
        unsafe extern "C" fn(
            image: *mut __DRIimage,
            plane: ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    #[doc = " Create image from texture."]
    #[doc = ""]
    #[doc = " \\since 6"]
    pub createImageFromTexture: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut __DRIcontext,
            target: ::std::os::raw::c_int,
            texture: ::std::os::raw::c_uint,
            depth: ::std::os::raw::c_int,
            level: ::std::os::raw::c_int,
            error: *mut ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    #[doc = " Like createImageFromNames, but takes a prime fd instead."]
    #[doc = ""]
    #[doc = " \\since 7"]
    pub createImageFromFds: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            fourcc: ::std::os::raw::c_int,
            fds: *mut ::std::os::raw::c_int,
            num_fds: ::std::os::raw::c_int,
            strides: *mut ::std::os::raw::c_int,
            offsets: *mut ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    #[doc = " Like createImageFromFds, but takes additional attributes."]
    #[doc = ""]
    #[doc = " For EGL_EXT_image_dma_buf_import."]
    #[doc = ""]
    #[doc = " \\since 8"]
    pub createImageFromDmaBufs: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            fourcc: ::std::os::raw::c_int,
            fds: *mut ::std::os::raw::c_int,
            num_fds: ::std::os::raw::c_int,
            strides: *mut ::std::os::raw::c_int,
            offsets: *mut ::std::os::raw::c_int,
            color_space: __DRIYUVColorSpace,
            sample_range: __DRISampleRange,
            horiz_siting: __DRIChromaSiting,
            vert_siting: __DRIChromaSiting,
            error: *mut ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    #[doc = " Blit a part of a __DRIimage to another and flushes"]
    #[doc = ""]
    #[doc = " flush_flag:"]
    #[doc = "    0:                  no flush"]
    #[doc = "    __BLIT_FLAG_FLUSH:  flush after the blit operation"]
    #[doc = "    __BLIT_FLAG_FINISH: flush and wait the blit finished"]
    #[doc = ""]
    #[doc = " \\since 9"]
    pub blitImage: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut __DRIcontext,
            dst: *mut __DRIimage,
            src: *mut __DRIimage,
            dstx0: ::std::os::raw::c_int,
            dsty0: ::std::os::raw::c_int,
            dstwidth: ::std::os::raw::c_int,
            dstheight: ::std::os::raw::c_int,
            srcx0: ::std::os::raw::c_int,
            srcy0: ::std::os::raw::c_int,
            srcwidth: ::std::os::raw::c_int,
            srcheight: ::std::os::raw::c_int,
            flush_flag: ::std::os::raw::c_int,
        ),
    >,
    #[doc = " Query for general capabilities of the driver that concern"]
    #[doc = " buffer sharing and image importing."]
    #[doc = ""]
    #[doc = " \\since 10"]
    pub getCapabilities: ::std::option::Option<
        unsafe extern "C" fn(screen: *mut __DRIscreen) -> ::std::os::raw::c_int,
    >,
    #[doc = " Returns a map of the specified region of a __DRIimage for the specified usage."]
    #[doc = ""]
    #[doc = " flags may include __DRI_IMAGE_TRANSFER_READ, which will populate the"]
    #[doc = " mapping with the current buffer content. If __DRI_IMAGE_TRANSFER_READ"]
    #[doc = " is not included in the flags, the buffer content at map time is"]
    #[doc = " undefined. Users wanting to modify the mapping must include"]
    #[doc = " __DRI_IMAGE_TRANSFER_WRITE; if __DRI_IMAGE_TRANSFER_WRITE is not"]
    #[doc = " included, behaviour when writing the mapping is undefined."]
    #[doc = ""]
    #[doc = " Returns the byte stride in *stride, and an opaque pointer to data"]
    #[doc = " tracking the mapping in **data, which must be passed to unmapImage()."]
    #[doc = ""]
    #[doc = " \\since 12"]
    pub mapImage: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut __DRIcontext,
            image: *mut __DRIimage,
            x0: ::std::os::raw::c_int,
            y0: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_uint,
            stride: *mut ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    #[doc = " Unmap a previously mapped __DRIimage"]
    #[doc = ""]
    #[doc = " \\since 12"]
    pub unmapImage: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut __DRIcontext,
            image: *mut __DRIimage,
            data: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Creates an image with implementation's favorite modifiers."]
    #[doc = ""]
    #[doc = " This acts like createImage except there is a list of modifiers passed in"]
    #[doc = " which the implementation may selectively use to create the DRIimage. The"]
    #[doc = " result should be the implementation selects one modifier (perhaps it would"]
    #[doc = " hold on to a few and later pick)."]
    #[doc = ""]
    #[doc = " The created image should be destroyed with destroyImage()."]
    #[doc = ""]
    #[doc = " Returns the new DRIimage. The chosen modifier can be obtained later on"]
    #[doc = " and passed back to things like the kernel's AddFB2 interface."]
    #[doc = ""]
    #[doc = " \\sa __DRIimageRec::createImage"]
    #[doc = ""]
    #[doc = " \\since 14"]
    pub createImageWithModifiers: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            format: ::std::os::raw::c_int,
            modifiers: *const u64,
            modifier_count: ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    pub createImageFromDmaBufs2: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            fourcc: ::std::os::raw::c_int,
            modifier: u64,
            fds: *mut ::std::os::raw::c_int,
            num_fds: ::std::os::raw::c_int,
            strides: *mut ::std::os::raw::c_int,
            offsets: *mut ::std::os::raw::c_int,
            color_space: __DRIYUVColorSpace,
            sample_range: __DRISampleRange,
            horiz_siting: __DRIChromaSiting,
            vert_siting: __DRIChromaSiting,
            error: *mut ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
    pub queryDmaBufFormats: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            max: ::std::os::raw::c_int,
            formats: *mut ::std::os::raw::c_int,
            count: *mut ::std::os::raw::c_int,
        ) -> GLboolean,
    >,
    pub queryDmaBufModifiers: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            fourcc: ::std::os::raw::c_int,
            max: ::std::os::raw::c_int,
            modifiers: *mut u64,
            external_only: *mut ::std::os::raw::c_uint,
            count: *mut ::std::os::raw::c_int,
        ) -> GLboolean,
    >,
    #[doc = " dmabuf format modifier attribute query for a given format and modifier."]
    #[doc = ""]
    #[doc = " \\param fourcc    The format to query. If this format is not supported by"]
    #[doc = "                  the driver, return false."]
    #[doc = " \\param modifier  The modifier to query. If this format+modifier is not"]
    #[doc = "                  supported by the driver, return false."]
    #[doc = " \\param attrib    The __DRI_IMAGE_FORMAT_MODIFIER_ATTRIB to query."]
    #[doc = " \\param value     A pointer to where to store the result of the query."]
    #[doc = ""]
    #[doc = " Returns true upon success."]
    #[doc = ""]
    #[doc = " \\since 16"]
    pub queryDmaBufFormatModifierAttribs: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            fourcc: u32,
            modifier: u64,
            attrib: ::std::os::raw::c_int,
            value: *mut u64,
        ) -> GLboolean,
    >,
    #[doc = " Create a DRI image from the given renderbuffer."]
    #[doc = ""]
    #[doc = " \\param context       the current DRI context"]
    #[doc = " \\param renderbuffer  the GL name of the renderbuffer"]
    #[doc = " \\param loaderPrivate for callbacks into the loader related to the image"]
    #[doc = " \\param error         will be set to one of __DRI_IMAGE_ERROR_xxx"]
    #[doc = " \\return the newly created image on success, or NULL otherwise"]
    #[doc = ""]
    #[doc = " \\since 17"]
    pub createImageFromRenderbuffer2: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut __DRIcontext,
            renderbuffer: ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
            error: *mut ::std::os::raw::c_uint,
        ) -> *mut __DRIimage,
    >,
    pub createImageFromDmaBufs3: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            fourcc: ::std::os::raw::c_int,
            modifier: u64,
            fds: *mut ::std::os::raw::c_int,
            num_fds: ::std::os::raw::c_int,
            strides: *mut ::std::os::raw::c_int,
            offsets: *mut ::std::os::raw::c_int,
            color_space: __DRIYUVColorSpace,
            sample_range: __DRISampleRange,
            horiz_siting: __DRIChromaSiting,
            vert_siting: __DRIChromaSiting,
            flags: u32,
            error: *mut ::std::os::raw::c_uint,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
}
#[test]
fn bindgen_test_layout___DRIimageExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIimageExtensionRec>(),
        200usize,
        concat!("Size of: ", stringify!(__DRIimageExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIimageExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIimageExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIimageExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromName as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromRenderbuffer
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromRenderbuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).destroyImage as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(destroyImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImage as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).queryImage as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(queryImage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIimageExtensionRec>())).dupImage as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(dupImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).validateUsage as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(validateUsage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromNames as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).fromPlanar as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(fromPlanar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromTexture as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromFds as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromFds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromDmaBufs as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromDmaBufs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).blitImage as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(blitImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).getCapabilities as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(getCapabilities)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIimageExtensionRec>())).mapImage as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(mapImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).unmapImage as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(unmapImage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageWithModifiers as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageWithModifiers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromDmaBufs2 as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromDmaBufs2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).queryDmaBufFormats as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(queryDmaBufFormats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).queryDmaBufModifiers as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(queryDmaBufModifiers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).queryDmaBufFormatModifierAttribs
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(queryDmaBufFormatModifierAttribs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromRenderbuffer2
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromRenderbuffer2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageExtensionRec>())).createImageFromDmaBufs3 as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageExtensionRec),
            "::",
            stringify!(createImageFromDmaBufs3)
        )
    );
}
pub type __DRIimageLookupExtension = __DRIimageLookupExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIimageLookupExtensionRec {
    pub base: __DRIextension,
    pub lookupEGLImage: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            image: *mut ::std::os::raw::c_void,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ) -> *mut __DRIimage,
    >,
}
#[test]
fn bindgen_test_layout___DRIimageLookupExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIimageLookupExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRIimageLookupExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIimageLookupExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIimageLookupExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageLookupExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageLookupExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageLookupExtensionRec>())).lookupEGLImage as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageLookupExtensionRec),
            "::",
            stringify!(lookupEGLImage)
        )
    );
}
pub type __DRI2configQueryExtension = __DRI2configQueryExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2configQueryExtensionRec {
    pub base: __DRIextension,
    pub configQueryb: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            var: *const ::std::os::raw::c_char,
            val: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
    >,
    pub configQueryi: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            var: *const ::std::os::raw::c_char,
            val: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub configQueryf: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            var: *const ::std::os::raw::c_char,
            val: *mut f32,
        ) -> ::std::os::raw::c_int,
    >,
    pub configQuerys: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            var: *const ::std::os::raw::c_char,
            val: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___DRI2configQueryExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2configQueryExtensionRec>(),
        48usize,
        concat!("Size of: ", stringify!(__DRI2configQueryExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2configQueryExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2configQueryExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2configQueryExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2configQueryExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2configQueryExtensionRec>())).configQueryb as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2configQueryExtensionRec),
            "::",
            stringify!(configQueryb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2configQueryExtensionRec>())).configQueryi as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2configQueryExtensionRec),
            "::",
            stringify!(configQueryi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2configQueryExtensionRec>())).configQueryf as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2configQueryExtensionRec),
            "::",
            stringify!(configQueryf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2configQueryExtensionRec>())).configQuerys as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2configQueryExtensionRec),
            "::",
            stringify!(configQuerys)
        )
    );
}
pub type __DRIrobustnessExtension = __DRIrobustnessExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIrobustnessExtensionRec {
    pub base: __DRIextension,
}
#[test]
fn bindgen_test_layout___DRIrobustnessExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIrobustnessExtensionRec>(),
        16usize,
        concat!("Size of: ", stringify!(__DRIrobustnessExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIrobustnessExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIrobustnessExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIrobustnessExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIrobustnessExtensionRec),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRInoErrorExtensionRec {
    pub base: __DRIextension,
}
#[test]
fn bindgen_test_layout___DRInoErrorExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRInoErrorExtensionRec>(),
        16usize,
        concat!("Size of: ", stringify!(__DRInoErrorExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRInoErrorExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRInoErrorExtensionRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRInoErrorExtensionRec>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRInoErrorExtensionRec),
            "::",
            stringify!(base)
        )
    );
}
pub type __DRInoErrorExtension = __DRInoErrorExtensionRec;
pub type __DRI2flushControlExtension = __DRI2flushControlExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2flushControlExtensionRec {
    pub base: __DRIextension,
}
#[test]
fn bindgen_test_layout___DRI2flushControlExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2flushControlExtensionRec>(),
        16usize,
        concat!("Size of: ", stringify!(__DRI2flushControlExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2flushControlExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2flushControlExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2flushControlExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2flushControlExtensionRec),
            "::",
            stringify!(base)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIconfigOptionsExtensionRec {
    pub base: __DRIextension,
    #[doc = "< deprecated since v2, use getXml instead"]
    pub xml: *const ::std::os::raw::c_char,
    #[doc = " Get an XML string that describes available driver options for use by a"]
    #[doc = " config application."]
    #[doc = ""]
    #[doc = " The returned string must be heap-allocated. The caller is responsible for"]
    #[doc = " freeing it."]
    pub getXml: ::std::option::Option<
        unsafe extern "C" fn(
            driver_name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout___DRIconfigOptionsExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIconfigOptionsExtensionRec>(),
        32usize,
        concat!("Size of: ", stringify!(__DRIconfigOptionsExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIconfigOptionsExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIconfigOptionsExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIconfigOptionsExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIconfigOptionsExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIconfigOptionsExtensionRec>())).xml as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIconfigOptionsExtensionRec),
            "::",
            stringify!(xml)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIconfigOptionsExtensionRec>())).getXml as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIconfigOptionsExtensionRec),
            "::",
            stringify!(getXml)
        )
    );
}
pub type __DRIconfigOptionsExtension = __DRIconfigOptionsExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIDriverVtableExtensionRec {
    pub base: __DRIextension,
    pub vtable: *mut __DriverAPIRec,
}
#[test]
fn bindgen_test_layout___DRIDriverVtableExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIDriverVtableExtensionRec>(),
        24usize,
        concat!("Size of: ", stringify!(__DRIDriverVtableExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIDriverVtableExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIDriverVtableExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIDriverVtableExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIDriverVtableExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIDriverVtableExtensionRec>())).vtable as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIDriverVtableExtensionRec),
            "::",
            stringify!(vtable)
        )
    );
}
pub type __DRIDriverVtableExtension = __DRIDriverVtableExtensionRec;
pub type __DRI2rendererQueryExtension = __DRI2rendererQueryExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRI2rendererQueryExtensionRec {
    pub base: __DRIextension,
    pub queryInteger: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            attribute: ::std::os::raw::c_int,
            val: *mut ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
    >,
    pub queryString: ::std::option::Option<
        unsafe extern "C" fn(
            screen: *mut __DRIscreen,
            attribute: ::std::os::raw::c_int,
            val: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout___DRI2rendererQueryExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRI2rendererQueryExtensionRec>(),
        32usize,
        concat!("Size of: ", stringify!(__DRI2rendererQueryExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRI2rendererQueryExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRI2rendererQueryExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2rendererQueryExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2rendererQueryExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2rendererQueryExtensionRec>())).queryInteger as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2rendererQueryExtensionRec),
            "::",
            stringify!(queryInteger)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRI2rendererQueryExtensionRec>())).queryString as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRI2rendererQueryExtensionRec),
            "::",
            stringify!(queryString)
        )
    );
}
pub const __DRIimageBufferMask___DRI_IMAGE_BUFFER_BACK: __DRIimageBufferMask = 1;
pub const __DRIimageBufferMask___DRI_IMAGE_BUFFER_FRONT: __DRIimageBufferMask = 2;
#[doc = " A buffer shared between application and compositor. The buffer may be"]
#[doc = " simultaneously accessed by each."]
#[doc = ""]
#[doc = " A shared buffer is equivalent to an EGLSurface whose EGLConfig contains"]
#[doc = " EGL_MUTABLE_RENDER_BUFFER_BIT_KHR and whose active EGL_RENDER_BUFFER (as"]
#[doc = " opposed to any pending, requested change to EGL_RENDER_BUFFER) is"]
#[doc = " EGL_SINGLE_BUFFER."]
#[doc = ""]
#[doc = " If buffer_mask contains __DRI_IMAGE_BUFFER_SHARED, then must contains no"]
#[doc = " other bits. As a corollary, a __DRIdrawable that has a \"shared\" buffer"]
#[doc = " has no front nor back buffer."]
#[doc = ""]
#[doc = " The loader returns __DRI_IMAGE_BUFFER_SHARED in buffer_mask if and only"]
#[doc = " if:"]
#[doc = "     - The loader supports __DRI_MUTABLE_RENDER_BUFFER_LOADER."]
#[doc = "     - The driver supports __DRI_MUTABLE_RENDER_BUFFER_DRIVER."]
#[doc = "     - The EGLConfig of the drawable EGLSurface contains"]
#[doc = "       EGL_MUTABLE_RENDER_BUFFER_BIT_KHR."]
#[doc = "     - The EGLContext's EGL_RENDER_BUFFER is EGL_SINGLE_BUFFER."]
#[doc = "       Equivalently, the EGLSurface's active EGL_RENDER_BUFFER (as"]
#[doc = "       opposed to any pending, requested change to EGL_RENDER_BUFFER) is"]
#[doc = "       EGL_SINGLE_BUFFER. (See the EGL 1.5 and"]
#[doc = "       EGL_KHR_mutable_render_buffer spec for details about \"pending\" vs"]
#[doc = "       \"active\" EGL_RENDER_BUFFER state)."]
#[doc = ""]
#[doc = " A shared buffer is similar to a front buffer in that all rendering to the"]
#[doc = " buffer should appear promptly on the screen. It is different from"]
#[doc = " a front buffer in that its behavior is independent from the"]
#[doc = " GL_DRAW_BUFFER state. Specifically, if GL_DRAW_FRAMEBUFFER is 0 and the"]
#[doc = " __DRIdrawable's buffer_mask is __DRI_IMAGE_BUFFER_SHARED, then all"]
#[doc = " rendering should appear promptly on the screen if GL_DRAW_BUFFER is not"]
#[doc = " GL_NONE."]
#[doc = ""]
#[doc = " The difference between a shared buffer and a front buffer is motivated"]
#[doc = " by the constraints of Android and OpenGL ES. OpenGL ES does not support"]
#[doc = " front-buffer rendering. Android's SurfaceFlinger protocol provides the"]
#[doc = " EGL driver only a back buffer and no front buffer. The shared buffer"]
#[doc = " mode introduced by EGL_KHR_mutable_render_buffer is a backdoor though"]
#[doc = " EGL that allows Android OpenGL ES applications to render to what is"]
#[doc = " effectively the front buffer, a backdoor that required no change to the"]
#[doc = " OpenGL ES API and little change to the SurfaceFlinger API."]
pub const __DRIimageBufferMask___DRI_IMAGE_BUFFER_SHARED: __DRIimageBufferMask = 4;
#[doc = " See __DRIimageLoaderExtensionRec::getBuffers::buffer_mask."]
pub type __DRIimageBufferMask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIimageList {
    pub image_mask: u32,
    pub back: *mut __DRIimage,
    pub front: *mut __DRIimage,
}
#[test]
fn bindgen_test_layout___DRIimageList() {
    assert_eq!(
        ::std::mem::size_of::<__DRIimageList>(),
        24usize,
        concat!("Size of: ", stringify!(__DRIimageList))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIimageList>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIimageList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIimageList>())).image_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageList),
            "::",
            stringify!(image_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIimageList>())).back as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageList),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__DRIimageList>())).front as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageList),
            "::",
            stringify!(front)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIimageLoaderExtensionRec {
    pub base: __DRIextension,
    #[doc = " Allocate color buffers."]
    #[doc = ""]
    #[doc = " \\param driDrawable"]
    #[doc = " \\param width              Width of allocated buffers"]
    #[doc = " \\param height             Height of allocated buffers"]
    #[doc = " \\param format             one of __DRI_IMAGE_FORMAT_*"]
    #[doc = " \\param stamp              Address of variable to be updated when"]
    #[doc = "                           getBuffers must be called again"]
    #[doc = " \\param loaderPrivate      The loaderPrivate for driDrawable"]
    #[doc = " \\param buffer_mask        Set of buffers to allocate. A bitmask of"]
    #[doc = "                           __DRIimageBufferMask."]
    #[doc = " \\param buffers            Returned buffers"]
    pub getBuffers: ::std::option::Option<
        unsafe extern "C" fn(
            driDrawable: *mut __DRIdrawable,
            format: ::std::os::raw::c_uint,
            stamp: *mut u32,
            loaderPrivate: *mut ::std::os::raw::c_void,
            buffer_mask: u32,
            buffers: *mut __DRIimageList,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Flush pending front-buffer rendering"]
    #[doc = ""]
    #[doc = " Any rendering that has been performed to the"]
    #[doc = " fake front will be flushed to the front"]
    #[doc = ""]
    #[doc = " \\param driDrawable    Drawable whose front-buffer is to be flushed"]
    #[doc = " \\param loaderPrivate  Loader's private data that was previously passed"]
    #[doc = "                       into __DRIdri2ExtensionRec::createNewDrawable"]
    pub flushFrontBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            driDrawable: *mut __DRIdrawable,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Return a loader capability value. If the loader doesn't know the enum,"]
    #[doc = " it will return 0."]
    #[doc = ""]
    #[doc = " \\since 2"]
    pub getCapability: ::std::option::Option<
        unsafe extern "C" fn(
            loaderPrivate: *mut ::std::os::raw::c_void,
            cap: dri_loader_cap,
        ) -> ::std::os::raw::c_uint,
    >,
    #[doc = " Flush swap buffers"]
    #[doc = ""]
    #[doc = " Make sure any outstanding swap buffers have been submitted to the"]
    #[doc = " device."]
    #[doc = ""]
    #[doc = " \\param driDrawable    Drawable whose swaps need to be flushed"]
    #[doc = " \\param loaderPrivate  Loader's private data that was previously passed"]
    #[doc = "                       into __DRIdri2ExtensionRec::createNewDrawable"]
    #[doc = ""]
    #[doc = " \\since 3"]
    pub flushSwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(
            driDrawable: *mut __DRIdrawable,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
    #[doc = " Clean up any loader state associated with an image."]
    #[doc = ""]
    #[doc = " \\param loaderPrivate  Loader's private data that was previously passed"]
    #[doc = "                       into a __DRIimageExtensionRec::createImage function"]
    #[doc = " \\since 4"]
    pub destroyLoaderImageState:
        ::std::option::Option<unsafe extern "C" fn(loaderPrivate: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout___DRIimageLoaderExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIimageLoaderExtensionRec>(),
        56usize,
        concat!("Size of: ", stringify!(__DRIimageLoaderExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIimageLoaderExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIimageLoaderExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageLoaderExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageLoaderExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageLoaderExtensionRec>())).getBuffers as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageLoaderExtensionRec),
            "::",
            stringify!(getBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageLoaderExtensionRec>())).flushFrontBuffer as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageLoaderExtensionRec),
            "::",
            stringify!(flushFrontBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageLoaderExtensionRec>())).getCapability as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageLoaderExtensionRec),
            "::",
            stringify!(getCapability)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageLoaderExtensionRec>())).flushSwapBuffers as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageLoaderExtensionRec),
            "::",
            stringify!(flushSwapBuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageLoaderExtensionRec>())).destroyLoaderImageState
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageLoaderExtensionRec),
            "::",
            stringify!(destroyLoaderImageState)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIimageDriverExtensionRec {
    pub base: __DRIextension,
    pub createNewScreen2: __DRIcreateNewScreen2Func,
    pub createNewDrawable: __DRIcreateNewDrawableFunc,
    pub createContextAttribs: __DRIcreateContextAttribsFunc,
    pub getAPIMask: __DRIgetAPIMaskFunc,
}
#[test]
fn bindgen_test_layout___DRIimageDriverExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIimageDriverExtensionRec>(),
        48usize,
        concat!("Size of: ", stringify!(__DRIimageDriverExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIimageDriverExtensionRec>(),
        8usize,
        concat!("Alignment of ", stringify!(__DRIimageDriverExtensionRec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageDriverExtensionRec>())).base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageDriverExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageDriverExtensionRec>())).createNewScreen2 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageDriverExtensionRec),
            "::",
            stringify!(createNewScreen2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageDriverExtensionRec>())).createNewDrawable as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageDriverExtensionRec),
            "::",
            stringify!(createNewDrawable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageDriverExtensionRec>())).createContextAttribs
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageDriverExtensionRec),
            "::",
            stringify!(createContextAttribs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIimageDriverExtensionRec>())).getAPIMask as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIimageDriverExtensionRec),
            "::",
            stringify!(getAPIMask)
        )
    );
}
pub type __DRIbackgroundCallableExtension = __DRIbackgroundCallableExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRIbackgroundCallableExtensionRec {
    pub base: __DRIextension,
    #[doc = " Indicate that this thread is being used by the driver as a background"]
    #[doc = " drawing thread which may make callbacks to the loader."]
    #[doc = ""]
    #[doc = " \\param loaderPrivate is the value that was passed to to the driver when"]
    #[doc = " the context was created.  This can be used by the loader to identify"]
    #[doc = " which context any callbacks are associated with."]
    #[doc = ""]
    #[doc = " If this function is called more than once from any given thread, each"]
    #[doc = " subsequent call overrides the loaderPrivate data that was passed in the"]
    #[doc = " previous call.  The driver can take advantage of this to re-use a"]
    #[doc = " background thread to perform drawing on behalf of multiple contexts."]
    #[doc = ""]
    #[doc = " It is permissible for the driver to call this function from a"]
    #[doc = " non-background thread (i.e. a thread that has already been bound to a"]
    #[doc = " context using __DRIcoreExtensionRec::bindContext()); when this happens,"]
    #[doc = " the \\c loaderPrivate pointer must be equal to the pointer that was"]
    #[doc = " passed to the driver when the currently bound context was created."]
    #[doc = ""]
    #[doc = " This call should execute quickly enough that the driver can call it with"]
    #[doc = " impunity whenever a background thread starts performing drawing"]
    #[doc = " operations (e.g. it should just set a thread-local variable)."]
    pub setBackgroundContext:
        ::std::option::Option<unsafe extern "C" fn(loaderPrivate: *mut ::std::os::raw::c_void)>,
    #[doc = " Indicate that it is multithread safe to use glthread.  For GLX/EGL"]
    #[doc = " platforms using Xlib, that involves calling XInitThreads, before"]
    #[doc = " opening an X display."]
    #[doc = ""]
    #[doc = " Note: only supported if extension version is at least 2."]
    #[doc = ""]
    #[doc = " \\param loaderPrivate is the value that was passed to to the driver when"]
    #[doc = " the context was created.  This can be used by the loader to identify"]
    #[doc = " which context any callbacks are associated with."]
    pub isThreadSafe: ::std::option::Option<
        unsafe extern "C" fn(loaderPrivate: *mut ::std::os::raw::c_void) -> GLboolean,
    >,
}
#[test]
fn bindgen_test_layout___DRIbackgroundCallableExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRIbackgroundCallableExtensionRec>(),
        32usize,
        concat!("Size of: ", stringify!(__DRIbackgroundCallableExtensionRec))
    );
    assert_eq!(
        ::std::mem::align_of::<__DRIbackgroundCallableExtensionRec>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__DRIbackgroundCallableExtensionRec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIbackgroundCallableExtensionRec>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIbackgroundCallableExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIbackgroundCallableExtensionRec>())).setBackgroundContext
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIbackgroundCallableExtensionRec),
            "::",
            stringify!(setBackgroundContext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRIbackgroundCallableExtensionRec>())).isThreadSafe as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRIbackgroundCallableExtensionRec),
            "::",
            stringify!(isThreadSafe)
        )
    );
}
pub type __DRImutableRenderBufferDriverExtension = __DRImutableRenderBufferDriverExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRImutableRenderBufferDriverExtensionRec {
    pub base: __DRIextension,
}
#[test]
fn bindgen_test_layout___DRImutableRenderBufferDriverExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRImutableRenderBufferDriverExtensionRec>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(__DRImutableRenderBufferDriverExtensionRec)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__DRImutableRenderBufferDriverExtensionRec>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__DRImutableRenderBufferDriverExtensionRec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRImutableRenderBufferDriverExtensionRec>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRImutableRenderBufferDriverExtensionRec),
            "::",
            stringify!(base)
        )
    );
}
pub type __DRImutableRenderBufferLoaderExtension = __DRImutableRenderBufferLoaderExtensionRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DRImutableRenderBufferLoaderExtensionRec {
    pub base: __DRIextension,
    #[doc = " Inform the display engine (that is, SurfaceFlinger and/or hwcomposer)"]
    #[doc = " that the __DRIdrawable has new content."]
    #[doc = ""]
    #[doc = " The display engine may ignore this call, for example, if it continually"]
    #[doc = " refreshes and displays the buffer on every frame, as in"]
    #[doc = " EGL_ANDROID_front_buffer_auto_refresh. On the other extreme, the display"]
    #[doc = " engine may refresh and display the buffer only in frames in which the"]
    #[doc = " driver calls this."]
    #[doc = ""]
    #[doc = " If the fence_fd is not -1, then the display engine will display the"]
    #[doc = " buffer only after the fence signals."]
    #[doc = ""]
    #[doc = " The drawable's current __DRIimageBufferMask, as returned by"]
    #[doc = " __DRIimageLoaderExtension::getBuffers(), must be"]
    #[doc = " __DRI_IMAGE_BUFFER_SHARED."]
    pub displaySharedBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            drawable: *mut __DRIdrawable,
            fence_fd: ::std::os::raw::c_int,
            loaderPrivate: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout___DRImutableRenderBufferLoaderExtensionRec() {
    assert_eq!(
        ::std::mem::size_of::<__DRImutableRenderBufferLoaderExtensionRec>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__DRImutableRenderBufferLoaderExtensionRec)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__DRImutableRenderBufferLoaderExtensionRec>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__DRImutableRenderBufferLoaderExtensionRec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRImutableRenderBufferLoaderExtensionRec>())).base as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRImutableRenderBufferLoaderExtensionRec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__DRImutableRenderBufferLoaderExtensionRec>()))
                .displaySharedBuffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__DRImutableRenderBufferLoaderExtensionRec),
            "::",
            stringify!(displaySharedBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __DriverAPIRec {
    pub _address: u8,
}
